{"version":3,"sources":["screen.js","Lib.js","evmLib.js","game/Analytic.js","daoLib.js","game/DAO.js","game/Panels.js","game/Home.js","App.js","serviceWorker.js","index.js"],"names":["ww","Dimensions","get","width","hh","height","scr","vp","vps","s","Math","floor","landscape","msg","a","Toastify","backgroundColor","gravity","position","text","showToast","ms","Promise","resolve","reject","setTimeout","key","val","window","localStorage","getItem","setItem","clear","PROVIDER","TOKEN","USDT","LPTOKEN","SIGNER","NFT","TREASURY","ROUTER","BUYER","LPVAULT","IPP","BCV","VOTE1","delay","openUrl","url","open","focus","openUrlHere","getStorageValue","setStorageValue","clearStorageValue","remainingText","seconds","secs","numDays","numHours","numMinute","ret","log","require","ethers","BigNumber","moment","maxUINT","process","BOT","constants","MaxUint256","ZERO18","TOKEN_JSON","TOKEN_ABI","abi","TOKEN_ADDRESS","networks","address","ERC20_ABI","USDT_ADDRESS","LP_ADDRESS","NFT_JSON","NFT_ABI","NFT_ADDRESS","TREASURY_JSON","TREASURY_ABI","TREASURY_ADDRESS","UNISWAPV2ROUTER02_ABI","UNISWAPV2PAIR_ABI","ROUTER_ADDRESS","FACTORY_ADDRESS","BUYER_ABI","BUYER_ADDRESS","LPVAULT_ABI","LPVAULT_ADDRESS","IPP_ABI","IPP_ADDRESS","BCV_ABI","BCV_ADDRESS","VOTE1_ABI","VOTE1_ADDRESS","ethereum","Error","on","_chainId","location","reload","request","method","chainId","Number","connected","isConnected","enable","providers","Web3Provider","getSigner","Contract","debug","getAddress","userAddress","pk","providerUrl","JsonRpcProvider","Wallet","tmp","createRandom","loadWallet","privateKey","provider","PROVIDER_URL","wallet","wei2eth","wei","utils","formatUnits","eth2wei","eth","parseEther","totalSupply","balanceOf","userUSDT","userToken","getBalance","userETH","getBlock","block","ts","timestamp","owner","buyerOwner","isAdmin","toLowerCase","tokenTotalSupply","blocktime","to","amountWei","opt","value","sendTransaction","tx","wait","hash","spender","approve","balance","burn","amountEth","router","WETH","addressWETH","path","amountOutMin","myAddress","deadline","unix","options","swapExactETHForTokens","swapResult","swapExactTokensForTokens","pospoolDelay","ADDRESS_POSPOOL","ADDRESS_REVRECEIVER","ADDRESS_TOKEN","lastUpdateTime","toNumber","nextUpdateTime","ts1","ts2","ts3","ts4","freezeTime","session","rewardPerNFT","stat","dataListLength","wrListLength","dataList","i","dataListAtIndex","row","push","id","createdTime","allowBurnTime","userOwnedNFTIds","num","tokenOfOwnerByIndex","nftId","balanceToken","balanceUSDT","balanceETH","revenue","mayUpdate","mayWithdraw","callStatic","update","newSession","console","error","pendingWithdraw","withdrawListAtIndex","claimer","done","toUpperCase","pendingWithdrawIndex","pendingWithdrawDeadline","numNFT","userInterest","ui","totalNFT","checkPool","receiver","mint","claim","index","withdraw","sendRevenue","amount","coinToToken","result","swapUSDT2Token","tokenToCoin","ADDRESS_COIN","ADDRESS_NFT","START_PRICE","getBasePrice","basePrice","b","from","buyPrice","mul","div","sellPrice","price","allowance","userUSDTAllowance","userTokenAllowance","userUSDTAllowanceOK","gte","userTokenAllowanceOK","swapBuyPrice","swapSellPrice","swapToken2USDT","amountUSDT","c","enableArbitrage","bp","getPriceData","pdArr","bp1","toString","bp2","cp2","mp2","bonus","bonusSample","tokenFromSwap","tokenFromCult","gt","sub","ADDRESS","swapCoinToToken","swapTokenToCoin","ADDRESS_ROUTER","ethRevenue","tokenBurn","mayBuy","buyAndBurn","nftRevenue","nftMayUpdate","amountIn","getAmountsOut","getPriceInfo","buyerAddress","buyPriceBN","sellPriceBN","test","doArbitrage","strategy","execute","bestCheck","profit","bestStart","best","maxTest","multiplier","ii","startBalance","numToken","endBalance","obj","minTest","buySwapSellTreasury","buyTreasurySellSwap","ADDRESS_WALLET","ADDRESS_LPTOKEN","balanceLPTokenUser","balanceLPTokenLPVault","balanceRewardLPWallet","balanceRewardLPVault","approved","currentTurn","vaultTurn","getUserData","arr","userTurn","userStake","userAllowUnstakeTime","getUnclaimedReward","userUnclaimedReward","dailyInterest","numRewardHistory","rewardHistoryLength","rewardHistory","minTime","totRPS","minTS","maxTS","getRewardHistory","reward","totLP","rps","datetime","format","unshift","add","delta","totalSupplyLP","getReserves","reserves","reserve0","reserve1","singleLP","oneLP2XYZ","oneLP2USDT","valueStaked","interest","interestPctgDaily","interestPlusBase","apyCalc1","pow","apy","apr","mayStake","eq","mayUnstake","mayClaim","getUserWithdrawData","wdArr","userPendingWithdraw","userAllowWithdrawTime","userStakedInUSDT","userDailyInterestInToken","userDailyInterestInUSDT","userYearlyInterestInUSDT","amountETH","stakeLPToken","unstakeLPToken","claimReward","withdrawLPToken","transfer","_poolLockPeriod","posAddr","pctg","setPricingScale","signMessage","sig","userNFTId","numParticipants","numChoice","bestChoice","choices","choiceStat","numVotes","choiceId","voters","nextVoteTime","getParticipantAtIndex","nftStat","mayVote","vote","priceArb","priceUser","EURL","ZERO6","CHAIN_ID","detectMetamask","loadMetamask","loadPrivateKey","loadWalletRandom","userData","ethTransfer","tokenApprove","tokenBurnAll","nftData","usdtApprove","routerBuyUsdt","routerBuyToken","nftMint","nftBurn","nftWithdraw","nftUpdate","nftClaim","nftSendRevenue","treasuryData","coinToTokenFromDex","treasuryUpdate","buyerData","buyerBuy","buyerUpdate","runArbitrage","lpvaultData","lpvaultUpdate","lpvaultApprove","lpvaultStake","lpvaultUnstake","lpvaultClaim","lpvaultWithdraw","lpvaultTest1","bcvSetPricingScale","getSignature","voteData","voteChoice","adminData","screen","Analytic","props","state","this","interval","setInterval","setState","clearInterval","fontWeight","textAlign","View","style","borderBottomWidth","padding","alignItems","justifyContent","Text","color","flexDirection","flex","item","round","title","borderWidth","borderColor","fontSize","space","lp","td","nd","ta","cm","ps","vs","nut","dt","Lib","renderStatCell","rows","lpvd","maxWidth","renderStat","FlatList","data","renderItem","renderRow","ListHeaderComponent","renderHeader","ItemSeparatorComponent","React","Component","URL","selectedFile","signature","formData","FormData","append","name","axios","post","setNFTImage","getNFTURL","spc2","DAO","imageTs","refreshData","selectedNFT","evmLib","event","target","files","modalVisible","modalResult","ud","daoLib","modalTxVisible","txHash","txError","errMsg","message","indicator","ActivityIndicator","size","btnClose","type","onPress","isVisible","onBackdropPress","nftUrl","enableSetImg","enableOpenExpl","imgWidth","nftImgWidth","nftImg","onLayout","e","w","nativeEvent","layout","Image","source","uri","renderModal","renderModalTx","accept","onChange","onFileChange","disabled","uploadImage","renderVotePanel","vd","opts","label","cb","winner","map","winnerLabel","length","ScrollView","horizontal","item2","paddingRight","paddingHorizontal","paddingVertical","borderTopWidth","Panels","desc","btnTitle","disable","iconName","pd","panelsData","nftPendingWithdraw","txt1","renderPanel","onClickJoin","nftPendingWithdrawDeadline","nftMayWithdraw","nftDataList","onClickWithdraw","deadlineStr","_","keyBy","onClickLeave","nftSession","onClickClaim","onClickSell","onClickStake","bonusSampleAmount","onClickSwap","renderTitle","renderPanelStake","renderPanelBonding","renderPanelJoin","renderPanelLeave","renderPanelClaim","renderPanelBurn","textStyle1","textTransform","textStyle1b","buttonStyle","titleStyle","to4dec","to2dec","Home","disclaimerAgree","show","connecting","contentIndex","connectMetamask","showMetamaskError","showDisclaimer","modalMintVisible","swapType","setAmountInput","amountInput","resultSwap","resultSwapFromDex","busyProcess","simulationResult","evm","buyUSDT","nextPage","disclaimerHide","CheckBox","onValueChange","ok","enableBuy","enableUpdate","msgArbitrage","btnApprove","buyerApproveUSDT","btnBurnAll","burnAllToken","simulateArbitrage","adminAction","walletAddress","memberStatus","walletContent","JSON","stringify","token1","token2","approveFunc","swapFunc","ownedAmount","needApprove","approveUSDT","approveToken","enableSwap","TextInput","onChangeText","txt","keyboardType","placeholder","setAmountByPctg","msgInterest","s2","lpd","txt2","unstakeTimeWarning","ownedLP","stakedLP","msgReward","inputOK","amountInputLP","enableUnstake","enableStake","enableClaim","btnClaimReward","withdrawAmount","withdrawTime","enableWithdraw","bonusAmount","bonusPctg","receiveAmount","totalAmount","renderDisclaimer","busyView","renderDisconnect","adminPanel","middleContent","burnNFT","renderBonding","renderPanelSwap","renderStake","renderAdmin","imgSz","menuCols","textCols","cI","renderPricePanel","TouchableOpacity","renderUserPanel","contentLayout","renderModalMint","borderBottomColor","renderContent","borderTopColor","renderFooter","setLevel","theme","colors","primary","App","h","minWidth","component","Landing","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4d5c3f2d.chunk.js","sourcesContent":["import { View, Dimensions, ActivityIndicator, Text } from 'react-native';\n\nlet ww = Dimensions.get('window').width;\nlet hh = Dimensions.get('window').height;\n\nlet scr = ww;\nlet landscape = ww > hh;\nif (ww > hh) scr = hh;\n\nconst vp = scr / 100;\nconst vps = (s) => {\n  if (s >= 100) return scr;\n  return Math.floor(vp * s);\n}\n\nexport default {\n  vp,\n  vps,\n  landscape\n};\n\n","import Toastify from 'toastify-js';\nimport 'toastify-js/src/toastify.css';\n\nasync function showToast(msg) {\n  Toastify({\n    backgroundColor: 'black',\n    gravity: 'bottom', // `top` or `bottom`\n    position: 'center', // `left`, `center` or `right`\n    text: msg\n  }).showToast();\n}\n\nasync function delay(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, ms);\n  })\n}\n\n// async function getLogger() {\n//   return console;\n// }\n\nasync function getStorageValue(key) {\n  const val = window.localStorage.getItem(key);\n  return val;\n}\n\nasync function setStorageValue(key, val) {\n  window.localStorage.setItem(key, val);\n}\n\nasync function clearStorageValue() {\n  window.localStorage.clear();\n}\n\nfunction openUrlHere(url) {\n  const win = window.open(url, '_self');\n  win.focus();\n}\n\nfunction openUrl(url) {\n  const win = window.open(url, '_blank');\n  win.focus();\n}\n\nfunction remainingText(seconds) {\n  let secs = seconds;\n  let numDays = Math.floor(secs / (3600 * 24));\n  secs = secs - (numDays * 3600 * 24);\n  let numHours = Math.floor(secs / 3600);\n  secs = secs - (numHours * 3600);\n  let numMinute = Math.floor(secs / 60);\n  secs = secs - (numMinute * 60);\n  let numSeconds = secs;\n  let ret = '';\n  if (numDays > 0) ret += (numDays + 'd ');\n  if (numHours > 0) ret += (numHours + 'h ');\n  if (numMinute > 0) ret += (numMinute + 'm ');\n  if (numSeconds > 0) ret += (numSeconds + 's');\n  return ret;\n}\n\nexport default {\n  delay,\n  openUrl,\n  openUrlHere,\n  showToast,\n  getStorageValue,\n  setStorageValue,\n  clearStorageValue,\n  remainingText\n};\n\n","const axios = require('axios');\nconst log = require('loglevel');\nconst ethers = require(\"ethers\").ethers;\nconst BigNumber = ethers.BigNumber;\nconst moment = require('moment');\n\nconst isBOT = process.env.BOT === 1 ? true : false;\n\nconst maxUINT = ethers.constants.MaxUint256;\nconst ZERO18 = '000000000000000000';\nconst ZERO6 = '000000';\n\nconst CHAIN_ID = 1030;\nconst EURL = 'https://evm.confluxscan.io';\n\nconst TOKEN_JSON = require('./json/Token.json');\nconst TOKEN_ABI = TOKEN_JSON.abi;\nconst TOKEN_ADDRESS = TOKEN_JSON.networks[CHAIN_ID].address;\n\nconst ERC20_JSON = require('./json/ERC20.json');\nconst ERC20_ABI = ERC20_JSON.abi;\n\nconst USDT_ADDRESS = '0xfe97e85d13abd9c1c33384e796f10b73905637ce';\nconst LP_ADDRESS = '0x87a340a3aBb0c20ea047FF4C1A55b3356f850788';\n\nconst NFT_JSON = require('./json/NFTV9.json');\nconst NFT_ABI = NFT_JSON.abi;\nconst NFT_ADDRESS = NFT_JSON.networks[CHAIN_ID].address;\n\nconst TREASURY_JSON = require('./json/TreasuryV4.json');\nconst TREASURY_ABI = TREASURY_JSON.abi;\nconst TREASURY_ADDRESS = TREASURY_JSON.networks[CHAIN_ID].address;\n\nconst UNISWAPV2ROUTER02_ABI = require('./json2/uniswapv2router02abi.json');\nconst UNISWAPV2FACTORY_ABI = require('./json2/uniswapv2factoryabi.json');\nconst UNISWAPV2PAIR_ABI = require('./json2/IPAIR.json').abi;\n\nconst ROUTER_ADDRESS = '0x62b0873055bf896dd869e172119871ac24aea305';\nconst FACTORY_ADDRESS = '0xe2a6f7c0ce4d5d300f97aa7e125455f5cd3342f5';\n\nconst BUYER_JSON = require('./json3/BuyerV2.sol/BuyerV2.json');\nconst BUYER_ABI = BUYER_JSON.abi;\nconst BUYER_ADDRESS = '0x3Ce240536BC5fC9083F42a4E6d1Bb83cA63161b8';\n\nconst LPVAULT_JSON = require('./json3/LPVaultV2.sol/LPVaultV2.json');\nconst LPVAULT_ABI = LPVAULT_JSON.abi;\nconst LPVAULT_ADDRESS = '0xedd7F777E6eF1365195D97727b333C99E165863D';\n\nconst IPP_JSON = require('./json/PoSPool.json');\nconst IPP_ABI = IPP_JSON.abi;\nconst IPP_ADDRESS = '0x3cbc6F7D406fe9701573FE6DdF28f4F17b5d46A3';\n\nconst BCV_JSON = require('./json3/BCurveV1.sol/BCurveV1.json');\nconst BCV_ABI = BCV_JSON.abi;\nconst BCV_ADDRESS = '0x7B158d41e4f6fd503624D1A39824da9A6b36893A';\n\nconst VOTE1_JSON = require('./json3/Vote1V2.sol/Vote1V2.json');\nconst VOTE1_ABI = VOTE1_JSON.abi;\nconst VOTE1_ADDRESS = '0x41511304735E558210AD6851c5e26463081e548d';\n\nlet PROVIDER;\nlet TOKEN;\nlet USDT;\nlet LPTOKEN;\nlet SIGNER;\nlet NFT;\nlet TREASURY;\nlet ROUTER;\nlet FACTORY;\nlet BUYER;\nlet LPVAULT;\nlet IPP;\nlet BCV;\nlet VOTE1;\n\nasync function detectMetamask() {\n  if (!window.ethereum) throw new Error('Please install Metamask and reload!');\n\n  window.ethereum.on('chainChanged', (_chainId) => window.location.reload());\n\n  let chainId = await window.ethereum.request({ method: 'eth_chainId' });\n  chainId = Number(chainId);\n  if (chainId !== CHAIN_ID) throw new Error('Please connect metamask to right network!');\n\n  let connected = window.ethereum.isConnected();\n\n  return connected;\n}\n\nasync function loadMetamask() {\n  window.ethereum.enable();\n  PROVIDER = new ethers.providers.Web3Provider(window.ethereum);\n  SIGNER = PROVIDER.getSigner();\n  TOKEN = new ethers.Contract(TOKEN_ADDRESS, TOKEN_ABI, SIGNER);\n  USDT = new ethers.Contract(USDT_ADDRESS, ERC20_ABI, SIGNER);\n  NFT = new ethers.Contract(NFT_ADDRESS, NFT_ABI, SIGNER);\n  TREASURY = new ethers.Contract(TREASURY_ADDRESS, TREASURY_ABI, SIGNER);\n  ROUTER = new ethers.Contract(ROUTER_ADDRESS, UNISWAPV2ROUTER02_ABI, SIGNER);\n  FACTORY = new ethers.Contract(FACTORY_ADDRESS, UNISWAPV2ROUTER02_ABI, SIGNER);\n  BUYER = new ethers.Contract(BUYER_ADDRESS, BUYER_ABI, SIGNER);\n  LPVAULT = new ethers.Contract(LPVAULT_ADDRESS, LPVAULT_ABI, SIGNER);\n  LPTOKEN = new ethers.Contract(LP_ADDRESS, UNISWAPV2PAIR_ABI, SIGNER);\n  IPP = new ethers.Contract(IPP_ADDRESS, IPP_ABI, SIGNER);\n  BCV = new ethers.Contract(BCV_ADDRESS, BCV_ABI, SIGNER);\n  VOTE1 = new ethers.Contract(VOTE1_ADDRESS, VOTE1_ABI, SIGNER);\n\n  // bugfix: nft unstaked user cant stake again\n  // const check = '0x88b280e521bf47f950dc50df35c10265e5f01534';\n  // const ct = await LPVAULT.currentTurn();\n  // console.log('ct:', ct.toNumber());\n  // const lpc1 = await LPVAULT.getUserData(check);\n  // log.debug(lpc1[0].toNumber());\n  // log.debug(lpc1[1].toNumber());\n  // log.debug(lpc1[2].toNumber());\n  // const lpc2 = await LPVAULT.getUnclaimedReward(check);\n  // log.debug(lpc2);\n\n  // const tv = await TREASURY.getContractVersion();\n  // console.log('treasury ver: ', tv);\n\n  // const vr = await VOTE1.getVoteResult();\n  // console.log('vote 1 result: ', vr.toNumber());\n\n  // const ui = await IPP.userInterest(NFT_ADDRESS);\n  // const us = await IPP.userSummary(NFT_ADDRESS);\n\n  // const wcfx = await IPP.withdrawableCfx();\n  // console.log('wcfx: ', wei2eth(wcfx));\n\n  // const block = await PROVIDER.getBlock();\n  // console.log(block);\n\n  // log.debug(IPP);\n  // const uiqq = await IPP.userInQueue(NFT_ADDRESS, 0, 20);\n  // log.debug('user in queue');\n  // log.debug('uiqq.length: ', uiqq.length);\n  // for (let i = 0; i < uiqq.length; i++) {\n  //   const ui = uiqq[i];\n  //   const endBlock = ui.endBlock.toNumber();\n  //   const votePower = ui.votePower.toNumber();\n  //   const curBlock = block.number;\n  //   const delta = (endBlock - curBlock) * 1.2; // 1 block numer = 1.2 sec\n  //   const hour = Math.ceil(delta / 3600);\n  //   const days = Math.ceil(delta / (3600 * 24));\n  //   console.log({ endBlock, votePower, delta, hour, days });\n  // }\n\n  // log.debug('** us **');\n  // log.debug(us);\n  // log.debug('locked: ', us.locked.toString());\n  // log.debug('unlocked: ', us.unlocked.toString());\n  // log.debug('available: ', us.available.toString());\n  // log.debug('votes: ', us.votes.toString());\n  // log.debug(uiqq);\n  // console.log(NFT_ADDRESS);\n\n  // const uoqq = await IPP.userOutQueue(NFT_ADDRESS);\n  // log.debug('user out queue num:', uoqq.length);\n  // for (let i = 0; i < uoqq.length; i++) {\n  //   const uo = uoqq[i];\n  //   log.debug(uo);\n  //   const endBlock = uo.endBlock.toNumber();\n  //   const votePower = uo.votePower.toNumber();\n  //   const curBlock = block.number;\n  //   const delta = (endBlock - curBlock) * 1.2; // 1 block numer = 1.2 sec\n  //   const hour = Math.ceil(delta / 3600);\n  //   const days = Math.ceil(delta / (3600 * 24));\n  //   log.debug({ endBlock, votePower, delta, hour, days });\n  // }\n\n  log.debug('** smart contract initialized **');\n\n  const userAddress = await SIGNER.getAddress();\n  return userAddress;\n}\n\nasync function loadPrivateKey(pk, providerUrl) {\n  PROVIDER = new ethers.providers.JsonRpcProvider(providerUrl);\n  SIGNER = new ethers.Wallet(pk, PROVIDER);\n  TOKEN = new ethers.Contract(TOKEN_ADDRESS, TOKEN_ABI, SIGNER);\n  USDT = new ethers.Contract(USDT_ADDRESS, ERC20_ABI, SIGNER);\n  NFT = new ethers.Contract(NFT_ADDRESS, NFT_ABI, SIGNER);\n  TREASURY = new ethers.Contract(TREASURY_ADDRESS, TREASURY_ABI, SIGNER);\n  ROUTER = new ethers.Contract(ROUTER_ADDRESS, UNISWAPV2ROUTER02_ABI, SIGNER);\n  FACTORY = new ethers.Contract(FACTORY_ADDRESS, UNISWAPV2ROUTER02_ABI, SIGNER);\n  BUYER = new ethers.Contract(BUYER_ADDRESS, BUYER_ABI, SIGNER);\n  LPVAULT = new ethers.Contract(LPVAULT_ADDRESS, LPVAULT_ABI, SIGNER);\n  LPTOKEN = new ethers.Contract(LP_ADDRESS, UNISWAPV2PAIR_ABI, SIGNER);\n  IPP = new ethers.Contract(IPP_ADDRESS, IPP_ABI, SIGNER);\n  BCV = new ethers.Contract(BCV_ADDRESS, BCV_ABI, SIGNER);\n  VOTE1 = new ethers.Contract(VOTE1_ADDRESS, VOTE1_ABI, SIGNER);\n\n  log.debug('** smart contract initialized **');\n}\n\nasync function loadWalletRandom() {\n  const tmp = ethers.Wallet.createRandom();\n  return await loadWallet(tmp.privateKey);\n}\n\nasync function loadWallet(pk) {\n  let provider = new ethers.providers.JsonRpcProvider(PROVIDER_URL);\n  const wallet = new ethers.Wallet(pk, provider);\n  return wallet;\n}\n\nfunction wei2eth(wei) {\n  return ethers.utils.formatUnits(wei, \"ether\");\n}\n\nfunction eth2wei(eth) {\n  return ethers.utils.parseEther(eth);\n}\n\nasync function userData() {\n  const userAddress = await SIGNER.getAddress();\n  const totalSupply = await TOKEN.totalSupply();\n  const userUSDT = await USDT.balanceOf(userAddress);\n  const userToken = await TOKEN.balanceOf(userAddress);\n  const userETH = await PROVIDER.getBalance(userAddress);\n  const block = await PROVIDER.getBlock();\n  const ts = block.timestamp;\n  const buyerOwner = await BUYER.owner();\n  const isAdmin = userAddress.toLowerCase() === buyerOwner.toLowerCase();\n\n  const ret = {\n    tokenTotalSupply: wei2eth(totalSupply),\n    userAddress,\n    userUSDT: wei2eth(userUSDT),\n    userETH: wei2eth(userETH),\n    userToken: wei2eth(userToken),\n    blocktime: ts,\n    isAdmin\n  }\n\n  log.debug('** userData **');\n  log.debug(ret);\n  return ret;\n}\n\nasync function ethTransfer(to, amountWei) {\n  let opt = {\n    to: to,\n    value: amountWei\n  }\n  let tx = await SIGNER.sendTransaction(opt);\n  await tx.wait();\n  log.debug('ethTransfer tx:' + tx.hash);\n  return tx.hash;\n}\n\nasync function tokenApprove(spender) {\n  log.debug('tokenApprove..');\n  const tx = await TOKEN.approve(spender, maxUINT);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function tokenBurnAll() {\n  log.debug('tokenBurnAll..');\n  const userAddress = await SIGNER.getAddress();\n  const balance = await TOKEN.balanceOf(userAddress);\n  const tx = await TOKEN.burn(balance);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function usdtApprove(spender) {\n  log.debug('usdtApprove..');\n  const tx = await USDT.approve(spender, maxUINT);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function routerBuyUsdt(amountEth) {\n  const amountWei = eth2wei(amountEth);\n  const router = ROUTER;\n  const addressWETH = await router.WETH();\n\n  let path = [\n    addressWETH,\n    USDT_ADDRESS\n  ];\n\n  const amountOutMin = '1';\n  const myAddress = await SIGNER.getAddress();\n  const deadline = moment().unix() + 300;\n\n  const options = { value: amountWei };\n  const swapResult = await router.swapExactETHForTokens(amountOutMin, path, myAddress, deadline, options);\n\n  log.debug('routerBuyUsdt tx: ' + swapResult.hash);\n  await swapResult.wait();\n  return swapResult.hash;\n}\n\nasync function routerBuyToken(amountEth) {\n  const amountWei = eth2wei(amountEth);\n  const router = ROUTER;\n\n  let path = [\n    USDT_ADDRESS,\n    TOKEN_ADDRESS\n  ];\n\n  const amountOutMin = '1';\n  const myAddress = await SIGNER.getAddress();\n  const deadline = moment().unix() + 300;\n\n  const swapResult = await router.swapExactTokensForTokens(\n    amountWei,\n    amountOutMin, // minimum\n    path,\n    myAddress,\n    deadline\n  );\n\n  log.debug('routerBuyToken tx: ' + swapResult.hash);\n  await swapResult.wait();\n  return swapResult.hash;\n}\n\nasync function nftData() {\n  const pospoolDelay = (3600 * 24 * 3); // eSpace PHX have this glitch\n  const block = await PROVIDER.getBlock();\n  const ts = block.timestamp;\n\n  const ADDRESS_POSPOOL = await NFT.ADDRESS_POSPOOL();\n  const ADDRESS_REVRECEIVER = await NFT.ADDRESS_REVRECEIVER();\n  const ADDRESS_TOKEN = await NFT.ADDRESS_TOKEN();\n  const lastUpdateTime = await NFT.lastUpdateTime();\n  const nextUpdateTimeStart = lastUpdateTime.toNumber() + (3600 * 24);\n  const nextUpdateTime = lastUpdateTime.toNumber() + (3600 * 24);\n\n  const ts1 = lastUpdateTime.toNumber() - 1800;\n  const ts2 = lastUpdateTime.toNumber() + 1800;\n  const ts3 = (lastUpdateTime.toNumber() + (3600 * 24)) - 1800;\n  const ts4 = (lastUpdateTime.toNumber() + (3600 * 24)) + 1800;\n  const freezeTime = (ts >= ts1 && ts <= ts2) || (ts >= ts3 && ts <= ts4);\n\n  const session = await NFT.session();\n  const rewardPerNFT = await NFT.rewardPerNFT();\n  const stat = await NFT.stat();\n\n  const dataListLength = stat[0].toNumber();\n  const wrListLength = stat[1].toNumber();\n\n  const dataList = [];\n  for (let i = 1; i < dataListLength; i++) {\n    const row = await NFT.dataListAtIndex(i);\n    dataList.push({\n      id: row[0].toNumber(),\n      createdTime: row[1].toNumber(),\n      allowBurnTime: row[2].toNumber() + pospoolDelay,\n      session: row[3].toNumber()\n    });\n  }\n\n  const userOwnedNFTIds = [];\n  const userAddress = await SIGNER.getAddress();\n  const num = await NFT.balanceOf(userAddress);\n  for (let i = 0; i < num.toNumber(); i++) {\n    const nftId = await NFT.tokenOfOwnerByIndex(userAddress, i);\n    userOwnedNFTIds.push(nftId.toNumber());\n  }\n\n  const balanceToken = await TOKEN.balanceOf(NFT_ADDRESS);\n  const balanceUSDT = await USDT.balanceOf(NFT_ADDRESS);\n  const balanceETH = await PROVIDER.getBalance(NFT_ADDRESS);\n\n  let revenue = 0;\n  let mayUpdate = false;\n  let mayWithdraw = false;\n  let newSession;\n  try {\n    const ret = await NFT.callStatic.update();\n    revenue = ret[0];\n    newSession = ret[1].toNumber();\n    mayUpdate = newSession > session.toNumber();\n    log.debug('** nft update static success **');\n    console.log({ revenue, newSession });\n  } catch (err) {\n    log.debug('** nft update error **');\n    log.error(err);\n  }\n\n  let pendingWithdraw = false;\n  let pendingWithdrawIndex;\n  let pendingWithdrawDeadline;\n\n  log.debug('** withdraw list **');\n  for (let i = 0; i < wrListLength; i++) {\n    const row = await NFT.withdrawListAtIndex(i);\n    log.debug(row);\n    const claimer = row[0];\n    const deadline = row[2].toNumber() + pospoolDelay;\n    const done = row[3];\n    if (claimer.toUpperCase() === userAddress.toUpperCase() && !done) {\n      pendingWithdraw = true;\n      pendingWithdrawIndex = i;\n      pendingWithdrawDeadline = deadline;\n      mayWithdraw = ts > deadline;\n      break;\n    }\n  }\n\n  const numNFT = await NFT.totalSupply();\n  const ui = await IPP.userInterest(NFT_ADDRESS);\n\n  const ret = {\n    revenue: wei2eth(ui),\n    totalNFT: numNFT.toNumber(),\n    ADDRESS_POSPOOL,\n    ADDRESS_REVRECEIVER,\n    ADDRESS_TOKEN,\n    lastUpdateTime: lastUpdateTime.toNumber(),\n    nextUpdateTime,\n    session: session.toNumber(),\n    newSession,\n    rewardPerNFT: wei2eth(rewardPerNFT),\n    dataList,\n    userOwnedNFTIds,\n    balanceToken: wei2eth(balanceToken),\n    balanceETH: wei2eth(balanceETH),\n    balanceUSDT: wei2eth(balanceUSDT),\n    revenue: wei2eth(revenue),\n    mayUpdate,\n    mayWithdraw,\n    pendingWithdraw,\n    pendingWithdrawIndex,\n    pendingWithdrawDeadline,\n    freezeTime\n  }\n\n  log.debug('** nftData **');\n  log.debug(ret);\n\n  await checkPool();\n  return ret;\n}\n\nasync function nftMint() {\n  const receiver = await SIGNER.getAddress();\n  const options = { value: eth2wei('1000') };\n  const tx = await NFT.mint(receiver, options);\n\n  log.debug('nftMint tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function nftBurn(nftId) {\n  const tx = await NFT.burn(nftId);\n  log.debug('nftBurn tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function nftClaim(nftId) {\n  const tx = await NFT.claim(nftId);\n  log.debug('nftClaim tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function nftWithdraw(index) {\n  log.debug('nftWithdraw for index: ', index);\n  const tx = await NFT.withdraw(index);\n  log.debug('nftWithdraw tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function nftUpdate() {\n  const tx = await NFT.update();\n  log.debug('nftUpdate tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function nftSendRevenue() {\n  const tx = await NFT.sendRevenue();\n  log.debug('nftSendRevenue tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function coinToToken(amount) {\n  const userAddress = await SIGNER.getAddress();\n  const result = await TREASURY.coinToToken(eth2wei(amount), userAddress);\n  return wei2eth(result);\n}\n\nasync function coinToTokenFromDex(amount) {\n  const result = await swapUSDT2Token(amount)\n  return wei2eth(result);\n}\n\nasync function tokenToCoin(amount) {\n  const userAddress = await SIGNER.getAddress();\n  const result = await TREASURY.tokenToCoin(eth2wei(amount), userAddress);\n  return wei2eth(result);\n}\n\nasync function treasuryData() {\n\n  const ADDRESS_COIN = await TREASURY.ADDRESS_COIN();\n  const ADDRESS_TOKEN = await TREASURY.ADDRESS_TOKEN();\n  const ADDRESS_NFT = await TREASURY.ADDRESS_NFT();\n  const START_PRICE = await TREASURY.START_PRICE();\n  const lastUpdateTime = await TREASURY.lastUpdateTime();\n  const basePrice = await TREASURY.getBasePrice();\n\n  const userAddress = await SIGNER.getAddress();\n  const otherAddress = TREASURY_ADDRESS;\n  const ownerAddress = await TREASURY.owner();\n\n  const b = await TREASURY.coinToToken(eth2wei('1'), userAddress);\n  const a = BigNumber.from(eth2wei('1'));\n  let buyPrice = a.mul(eth2wei('1')).div(b);\n  let sellPrice = await TREASURY.tokenToCoin(eth2wei('1'), userAddress);\n  const price = await TREASURY.tokenToCoin(eth2wei('1'), userAddress);\n  const balanceToken = await TOKEN.balanceOf(TREASURY_ADDRESS);\n  const balanceUSDT = await USDT.balanceOf(TREASURY_ADDRESS);\n  const balanceETH = await PROVIDER.getBalance(TREASURY_ADDRESS);\n\n  const userUSDTAllowance = await USDT.allowance(userAddress, TREASURY_ADDRESS);\n  const userTokenAllowance = await TOKEN.allowance(userAddress, TREASURY_ADDRESS);\n  const userUSDT = await USDT.balanceOf(userAddress);\n  const userToken = await TOKEN.balanceOf(userAddress);\n  const userUSDTAllowanceOK = userUSDTAllowance.gte(userUSDT);\n  const userTokenAllowanceOK = userTokenAllowance.gte(userToken);\n\n  const block = await PROVIDER.getBlock();\n  const ts = block.timestamp;\n\n  const mayUpdate = balanceUSDT.gte(1 + ZERO18) && (ts > lastUpdateTime.toNumber());\n\n  let swapBuyPrice = '0';\n  let swapSellPrice = '0';\n\n  try {\n    const a = await swapToken2USDT('1');\n    swapSellPrice = wei2eth(a);\n  } catch (err) {\n    log.error(err);\n  }\n\n  try {\n    const amountUSDT = '0.01';\n    const b = await swapUSDT2Token(amountUSDT);\n    const a = BigNumber.from(eth2wei(amountUSDT) + ZERO18);\n    const c = a.div(b);\n    swapBuyPrice = wei2eth(c);\n  } catch (err) {\n    log.error(err);\n  }\n\n  buyPrice = wei2eth(buyPrice);\n  sellPrice = wei2eth(sellPrice);\n  let enableArbitrage = false;\n\n  let doArbitrage = false;\n  if (Number(swapBuyPrice) < Number(sellPrice)) {\n    enableArbitrage = true;\n  }\n\n  if (Number(buyPrice) < Number(swapSellPrice)) {\n    enableArbitrage = true;\n  }\n\n  log.debug('** arbitrage ** ', enableArbitrage);\n\n  // bcv here\n  const bp = await TREASURY.getBasePrice();\n  const pdArr = await BCV.getPriceData();\n\n  log.debug('** bcv data **');\n  log.debug({\n    bp1: bp.toString(),\n    bp2: pdArr[0].toString(),\n    cp2: pdArr[1].toString(),\n    mp2: pdArr[2].toString()\n  });\n\n  let bonus = 0;\n  let bonusSample = 10000;\n\n  const tokenFromSwap = await swapUSDT2Token('' + bonusSample);\n  const tokenFromCult = await TREASURY.coinToToken(eth2wei('' + bonusSample), userAddress);\n  log.debug('** bonus calc **');\n  log.debug('swap:', wei2eth(tokenFromSwap));\n  log.debug('cult:', wei2eth(tokenFromCult));\n  if (tokenFromCult.gt(tokenFromSwap)) {\n    const a = tokenFromCult.sub(tokenFromSwap);\n    const b = a.mul(100).div(tokenFromSwap);\n    bonus = b.toNumber();\n  }\n\n  log.debug('bonus percentage ', bonus);\n\n\n\n  const ret = {\n    ADDRESS: TREASURY_ADDRESS,\n    ADDRESS_COIN,\n    ADDRESS_TOKEN,\n    ADDRESS_NFT,\n    START_PRICE: START_PRICE.toString(),\n    buyPrice: buyPrice,\n    sellPrice: sellPrice,\n    swapBuyPrice,\n    swapSellPrice,\n    enableArbitrage,\n    price: wei2eth(price),\n    lastUpdateTime: lastUpdateTime.toNumber(),\n    basePrice: wei2eth(basePrice),\n    balanceToken: wei2eth(balanceToken),\n    balanceETH: wei2eth(balanceETH),\n    balanceUSDT: wei2eth(balanceUSDT),\n    userUSDTAllowance: userUSDTAllowance.toString(),\n    userTokenAllowance: userTokenAllowance.toString(),\n    userUSDTAllowanceOK,\n    userTokenAllowanceOK,\n    mayUpdate,\n    bonus,\n    bonusSample\n  }\n\n  log.debug(ret);\n  return ret;\n}\n\nasync function swapCoinToToken(amount, nftId) {\n  if (!nftId) nftId = 1;\n  const userAddress = await SIGNER.getAddress();\n  const tx = await TREASURY.swapCoinToToken(\n    eth2wei(amount),\n    userAddress,\n    nftId\n  );\n  log.debug('swapCoinToToken tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function swapTokenToCoin(amount, nftId) {\n  log.debug('amount: ', amount);\n  if (!nftId) nftId = 0;\n  const userAddress = await SIGNER.getAddress();\n  const tx = await TREASURY.swapTokenToCoin(\n    eth2wei(amount),\n    userAddress,\n    nftId\n  );\n  log.debug('swapTokenToCoin tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function treasuryUpdate() {\n  const tx = await TREASURY.update();\n  log.debug('treasuryUpdate tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function buyerData() {\n\n  const balanceETH = await PROVIDER.getBalance(BUYER_ADDRESS);\n  const balanceUSDT = await USDT.balanceOf(BUYER_ADDRESS);\n  const ADDRESS_ROUTER = await BUYER.ADDRESS_ROUTER();\n  let ethRevenue = 0;\n  let tokenBurn = 0;\n  let mayBuy = false;\n  try {\n    const ret = await BUYER.callStatic.buyAndBurn(1, 1);\n    ethRevenue = wei2eth(ret[0]);\n    tokenBurn = wei2eth(ret[1]);\n    log.debug({ ret });\n    mayBuy = Number(ethRevenue) > 0;\n  } catch (err) {\n    log.debug('** buy & burn fail **');\n    // log.error(err);\n  }\n\n  let mayUpdate = false;\n  try {\n    log.debug('BUYER.callStatic.update()');\n    await BUYER.callStatic.update();\n    mayUpdate = true;\n  } catch (err) {\n    log.debug('** buyer update fail **');\n    // if (err && err.reason) log.error(err.reason);\n    // else log.error(err);\n  }\n\n  const userAddress = await SIGNER.getAddress();\n  const userUSDTAllowance = await USDT.allowance(userAddress, BUYER_ADDRESS);\n\n  const session = await NFT.session();\n\n  let nftRevenue = 0;\n  let nftMayUpdate = false;\n  try {\n    const ret = await NFT.callStatic.update();\n    nftRevenue = wei2eth(ret[0]);\n    nftRevenue = Number(nftRevenue);\n    const newSession = ret[1].toNumber();\n    nftMayUpdate = newSession > session.toNumber();\n  } catch (err) {\n    log.debug('error nftRevenue && nftMayUpdate');\n  }\n\n  const ret = {\n    address: BUYER_ADDRESS,\n    balanceETH: wei2eth(balanceETH),\n    balanceUSDT: wei2eth(balanceUSDT),\n    ADDRESS_ROUTER,\n    ethRevenue,\n    tokenBurn,\n    mayBuy,\n    mayUpdate,\n    userUSDTAllowance: userUSDTAllowance.toString(),\n    nftRevenue,\n    nftMayUpdate\n  }\n\n  log.debug('** buyerData **');\n  log.debug(ret);\n  return ret;\n}\n\nasync function buyerBuy() {\n  const tx = await BUYER.buyAndBurn(1, 1);\n  log.debug('buyerBuy tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function buyerUpdate() {\n  const tx = await BUYER.update();\n  log.debug('BUYER.update() tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function swapToken2USDT(eth) {\n  let amountIn = ethers.utils.parseEther(eth);\n  let path = [\n    TOKEN_ADDRESS,\n    USDT_ADDRESS\n  ];\n\n  let result = await ROUTER.getAmountsOut(amountIn, path);\n  return result[1];\n}\n\nasync function swapUSDT2Token(eth) {\n  let amountIn = ethers.utils.parseEther(eth);\n  let path = [\n    USDT_ADDRESS,\n    TOKEN_ADDRESS\n  ];\n\n  let result = await ROUTER.getAmountsOut(amountIn, path);\n  return result[1];\n}\n\nasync function getPriceInfo(buyerAddress) {\n  const b = await TREASURY.coinToToken(eth2wei('1'), buyerAddress);\n  const a = BigNumber.from(eth2wei('1'));\n  const buyPriceBN = a.mul(eth2wei('1')).div(b);\n  const sellPriceBN = await TREASURY.tokenToCoin(eth2wei('1'), buyerAddress);\n  const buyPrice = Number(wei2eth(buyPriceBN));\n  const sellPrice = Number(wei2eth(sellPriceBN));\n\n  let swapBuyPrice = '0';\n  let swapSellPrice = '0';\n\n  try {\n    const a = await swapToken2USDT('1');\n    swapSellPrice = Number(wei2eth(a));\n  } catch (err) {\n    log.debug('swapSellPrice error..');\n    log.error(err);\n  }\n\n  try {\n    const test = '0.01';\n    const b = await swapUSDT2Token(test);\n    const a = BigNumber.from(eth2wei(test) + ZERO18);\n    const c = a.div(b);\n    swapBuyPrice = Number(wei2eth(c));\n  } catch (err) {\n    log.debug('swapBuyPrice error..');\n    log.error(err);\n  }\n\n  let doArbitrage = false;\n  let strategy = 'stay out';\n\n  if (swapBuyPrice < sellPrice) {\n    doArbitrage = true;\n    strategy = 'pump';\n  }\n\n  if (buyPrice < swapSellPrice) {\n    doArbitrage = true;\n    strategy = 'dump';\n  }\n\n\n  return { doArbitrage, strategy, swapBuyPrice, swapSellPrice, buyPrice, sellPrice };\n}\n\nasync function runArbitrage(execute, nftId) {\n  log.debug('** arbitrage **');\n\n  const buyerAddress = BUYER_ADDRESS;\n  const userAddress = await SIGNER.getAddress();\n  const userUSDT = await USDT.balanceOf(userAddress);\n\n  const b = await TREASURY.coinToToken(eth2wei('1'), buyerAddress);\n  const a = BigNumber.from(eth2wei('1'));\n  const buyPriceBN = a.mul(eth2wei('1')).div(b);\n  const sellPriceBN = await TREASURY.tokenToCoin(eth2wei('1'), buyerAddress);\n  const buyPrice = Number(wei2eth(buyPriceBN));\n  const sellPrice = Number(wei2eth(sellPriceBN));\n\n  let swapBuyPrice = '0';\n  let swapSellPrice = '0';\n\n  try {\n    const a = await swapToken2USDT('1');\n    swapSellPrice = Number(wei2eth(a));\n  } catch (err) {\n    log.debug('swapSellPrice error..');\n    log.error(err);\n  }\n\n  try {\n    const test = '1';\n    const b = await swapUSDT2Token(test);\n    const a = BigNumber.from(eth2wei(test) + ZERO18);\n    const c = a.div(b);\n    swapBuyPrice = Number(wei2eth(c));\n  } catch (err) {\n    log.debug('swapBuyPrice error..');\n    log.error(err);\n  }\n\n  let doArbitrage = false;\n  let strategy = 'stay out';\n\n  if (swapBuyPrice < sellPrice) {\n    doArbitrage = true;\n    strategy = 'pump';\n  }\n\n  if (buyPrice < swapSellPrice) {\n    doArbitrage = true;\n    strategy = 'dump';\n  }\n\n  log.debug({ doArbitrage, swapBuyPrice, swapSellPrice, buyPrice, sellPrice });\n\n  let bestCheck = { strategy: 'stay out', profit: '0' };\n  let bestStart = 1;\n  let best = { strategy: 'stay out', profit: '0' };\n\n  if (doArbitrage) {\n    const maxTest = wei2eth(userUSDT);\n\n    // check for best start\n    log.debug('** check for best start **');\n    if (execute && strategy === 'dump') {\n      const multiplier = 10;\n      for (let ii = 1; ii < 10000; ii++) {\n        const amountUSDT = ii * multiplier; // 10$\n        if (amountUSDT > Number(maxTest)) break;\n        const test = amountUSDT + '';\n\n        const startBalance = eth2wei(test);\n        const numToken = await TREASURY.coinToToken(startBalance, buyerAddress);\n        const endBalance = await swapToken2USDT(wei2eth(numToken));\n        if (endBalance.gt(startBalance)) {\n          const profit = endBalance.sub(startBalance);\n          const obj = { strategy, test, profit: wei2eth(profit) };\n          log.debug(obj);\n\n          if (Number(obj.profit) > Number(bestCheck.profit)) {\n            bestCheck = obj;\n          } else break;\n        } else {\n          log.debug('minus');\n          log.debug({ startBalance: startBalance.toString(), endBalance: endBalance.toString() });\n          break;\n        }\n      }\n\n      bestStart = Number(bestCheck.test) - multiplier;\n      if (bestStart > 0) {\n        // sanity check\n      } else {\n        bestStart = 1;\n      }\n\n      log.debug('bestStart is ', bestStart);\n    }\n    log.debug('** done **');\n\n    for (let i = bestStart; i < 10000; i++) {\n      const amountUSDT = i; // 1$\n      if (amountUSDT > Number(maxTest)) break;\n      const test = amountUSDT + '';\n\n      if (strategy === 'pump') {\n        const startBalance = eth2wei(test);\n        const numToken = await swapUSDT2Token(test);\n        const endBalance = await TREASURY.tokenToCoin(numToken, buyerAddress);\n        if (endBalance.gt(startBalance)) {\n          const profit = endBalance.sub(startBalance);\n          const obj = { strategy, test, profit: wei2eth(profit) };\n          log.debug(obj);\n\n          if (Number(obj.profit) > Number(best.profit)) {\n            best = obj;\n            if (!execute) break;\n          } else break;\n        } else {\n          log.debug('minus');\n          log.debug({ startBalance: startBalance.toString(), endBalance: endBalance.toString() });\n          break;\n        }\n      } else if (strategy === 'dump') {\n        const startBalance = eth2wei(test);\n        const numToken = await TREASURY.coinToToken(startBalance, buyerAddress);\n        const endBalance = await swapToken2USDT(wei2eth(numToken));\n        if (endBalance.gt(startBalance)) {\n          const profit = endBalance.sub(startBalance);\n          const obj = { strategy, test, profit: wei2eth(profit) };\n          log.debug(obj);\n\n          if (Number(obj.profit) > Number(best.profit)) {\n            best = obj;\n            if (!execute) break;\n          } else break;\n        } else {\n          log.debug('minus');\n          log.debug({ startBalance: startBalance.toString(), endBalance: endBalance.toString() });\n          break;\n        }\n      } else {\n        break;\n      }\n\n    }\n\n    try {\n      if (execute) {\n        log.debug('** execute **');\n        log.debug(best);\n        let tx;\n        if (best.strategy === 'pump') {\n\n          const maxTest = Number(best.test);\n          const minTest = 1;\n          for (let ii = maxTest; ii >= minTest; ii--) {\n            try {\n              const amount = eth2wei(ii + '');\n              tx = await BUYER.buySwapSellTreasury(amount, nftId);\n              log.debug('success tx for ', ii);\n              break;\n            } catch (err) {\n              log.debug('error tx - test smaller from ', ii);\n            }\n          }\n\n          await tx.wait();\n          return tx.hash;\n        } else if (best.strategy === 'dump') {\n\n          const maxTest = Number(best.test);\n          const minTest = 1;\n          for (let ii = maxTest; ii >= minTest; ii--) {\n            try {\n              const amount = eth2wei(ii + '');\n              tx = await BUYER.buyTreasurySellSwap(amount, nftId);\n              log.debug('success tx for ', ii);\n              break;\n            } catch (err) {\n              log.debug('error tx - test smaller from ', ii);\n            }\n          }\n\n          await tx.wait();\n          return tx.hash;\n        } else {\n          return false;\n        }\n      }\n    } catch (err) {\n      log.error(err);\n    }\n\n  }\n\n  return best;\n}\n\nasync function lpvaultData() {\n  const block = await PROVIDER.getBlock();\n  const ts = block.timestamp;\n\n  const ADDRESS_WALLET = await LPVAULT.ADDRESS_WALLET();\n  const ADDRESS_TOKEN = await LPVAULT.ADDRESS_TOKEN();\n  const ADDRESS_LPTOKEN = await LPVAULT.ADDRESS_LPTOKEN();\n\n  const userAddress = await SIGNER.getAddress();\n  const balanceLPTokenUser = await LPTOKEN.balanceOf(userAddress);\n  const balanceLPTokenLPVault = await LPTOKEN.balanceOf(LPVAULT_ADDRESS);\n  const balanceRewardLPWallet = await TOKEN.balanceOf(ADDRESS_WALLET);\n  const balanceRewardLPVault = await TOKEN.balanceOf(LPVAULT_ADDRESS);\n\n  const allowance = await LPTOKEN.allowance(userAddress, LPVAULT_ADDRESS);\n  const approved = allowance.gte(balanceLPTokenUser.toString());\n\n  const vaultTurn = (await LPVAULT.currentTurn()).toNumber();\n  const arr = await LPVAULT.getUserData(userAddress);\n  const userTurn = arr[0].toNumber();\n  const userStake = arr[1];\n  const userAllowUnstakeTime = arr[2].toNumber();\n  const userUnclaimedReward = await LPVAULT.getUnclaimedReward(userAddress);\n\n  log.debug('** calc daily reward **');\n  let dailyInterest = BigNumber.from('0');\n\n  const rewardHistoryLength = (await LPVAULT.numRewardHistory()).toNumber();\n  const rewardHistory = [];\n  if (rewardHistoryLength > 2) {\n    const minTime = ts - (3600 * 24 * 8); // 1 week\n\n    let totRPS = BigNumber.from('0');\n    let minTS = false;\n    let maxTS = false;\n    for (let i = 0; i < rewardHistoryLength; i++) {\n      const arr = await LPVAULT.getRewardHistory(i);\n      const reward = wei2eth(arr[0]);\n      const totLP = wei2eth(arr[1]);\n      const rps = arr[2];\n      const ts = arr[3].toNumber();\n      if (ts >= minTime) {\n        const row = { reward, totLP, rps: wei2eth(rps), ts, datetime: moment.unix(ts).format('DD MMM HH:mm') }\n        rewardHistory.unshift(row);\n        log.debug(row);\n        if (!minTS) {\n          minTS = ts;\n        } else {\n          maxTS = ts;\n          totRPS = totRPS.add(rps);\n        }\n      }\n    }\n\n    const delta = maxTS - minTS;\n    const oneDay = 3600 * 24;\n    dailyInterest = totRPS.mul(oneDay).div(delta);\n\n    // const index2 = rewardHistoryLength - 1;\n    // const index1 = index2 - 1;\n    // const arr2 = await LPVAULT.getRewardHistory(index2);\n    // const arr1 = await LPVAULT.getRewardHistory(index1);\n    // // (reward, totalStake, rewardPerStake, createdAt);\n    // const rewardPerStake = arr2[2];\n    // const ts2 = arr2[3].toNumber();\n    // const ts1 = arr1[3].toNumber();\n    // const delta = ts2 - ts1;\n    // const oneDay = 3600 * 24;\n    // dailyInterest = rewardPerStake.mul(oneDay).div(delta);\n  }\n\n  log.debug('** calc APY **');\n  const totalSupplyLP = await LPTOKEN.totalSupply();\n  const reserves = await LPTOKEN.getReserves();\n  const reserve0 = reserves[0];\n  const reserve1 = reserves[1];\n\n  const singleLP = ethers.utils.parseEther('2');\n  const oneLP2XYZ = singleLP.mul(reserve0).div(totalSupplyLP); // price of 1 LP in XYZ\n  const oneLP2USDT = singleLP.mul(reserve1).div(totalSupplyLP); // price of 1 LP in XYZ\n\n  const valueStaked = Math.floor(wei2eth(balanceLPTokenLPVault) * wei2eth(oneLP2USDT));\n\n  const interest = Number(wei2eth(dailyInterest)) / Number(wei2eth(oneLP2XYZ));\n  const interestPctgDaily = interest * 100;\n  const interestPlusBase = 1 + interest;\n  const apyCalc1 = Math.pow(interestPlusBase, 365);\n  const apyCalc2 = apyCalc1 - 1;\n  const apy = apyCalc2 * 100;\n  const apr = interest * 365 * 100;\n\n  const mayStake = balanceLPTokenUser.gt('0') && userUnclaimedReward.eq('0') && approved;\n  const mayUnstake = userStake.gt('0') && userUnclaimedReward.eq('0') && (ts > userAllowUnstakeTime);\n  const mayClaim = userUnclaimedReward.gt('0');\n\n  const wdArr = await LPVAULT.getUserWithdrawData(userAddress);\n\n  const userPendingWithdraw = wei2eth(wdArr[0]);\n  const userAllowWithdrawTime = (wdArr[1]).toNumber();\n  const mayWithdraw = Number(userPendingWithdraw) > 0 && (userAllowWithdrawTime < ts);\n\n  const userStakedInUSDT = Math.floor(wei2eth(userStake) * wei2eth(oneLP2USDT));\n  const userDailyInterestInToken = Number(wei2eth(dailyInterest)) * Number(wei2eth(userStake));\n\n  const userDailyInterestInUSDT = userDailyInterestInToken ? wei2eth(await swapToken2USDT(userDailyInterestInToken + '')) : 0;\n  const userYearlyInterestInUSDT = 365 * Number(userDailyInterestInUSDT);\n\n  const ret = {\n    ADDRESS_WALLET,\n    ADDRESS_TOKEN,\n    ADDRESS_LPTOKEN,\n    balanceLPTokenUser: wei2eth(balanceLPTokenUser),\n    balanceLPTokenLPVault: wei2eth(balanceLPTokenLPVault),\n    balanceRewardLPWallet: wei2eth(balanceRewardLPWallet),\n    balanceRewardLPVault: wei2eth(balanceRewardLPVault),\n    vaultTurn,\n    userTurn,\n    userStake: wei2eth(userStake),\n    userStakedInUSDT,\n    userDailyInterestInToken,\n    userDailyInterestInUSDT,\n    userYearlyInterestInUSDT,\n    userAllowUnstakeTime,\n    userUnclaimedReward: wei2eth(userUnclaimedReward),\n    reserve0: reserve0.toString(),\n    reserve1: reserve1.toString(),\n    oneLP2XYZ: wei2eth(oneLP2XYZ),\n    apy,\n    apr,\n    dailyInterest: wei2eth(dailyInterest),\n    mayStake,\n    mayUnstake,\n    mayClaim,\n    allowance,\n    approved,\n    ts,\n    userPendingWithdraw,\n    userAllowWithdrawTime,\n    mayWithdraw,\n    rewardHistory,\n    valueStaked,\n    interestPctgDaily\n  }\n\n  log.debug('** lpvaultData **')\n  log.debug(ret);\n  return ret;\n}\n\nasync function lpvaultUpdate() {\n  log.debug('lpvaultUpdate..');\n  const tx = await LPVAULT.update();\n  log.debug('tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function lpvaultApprove() {\n  log.debug('lpvaultApprove..');\n  const tx = await LPTOKEN.approve(LPVAULT_ADDRESS, maxUINT);\n  log.debug('tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function lpvaultStake(amountETH) {\n  log.debug('lpvaultStake..');\n  const amount = eth2wei(amountETH);\n  const tx = await LPVAULT.stakeLPToken(amount);\n  log.debug('tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function lpvaultUnstake(amountETH) {\n  log.debug('lpvaultUnstake..');\n  const amount = eth2wei(amountETH);\n  const tx = await LPVAULT.unstakeLPToken(amount);\n  log.debug('tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function lpvaultClaim() {\n  log.debug('lpvaultClaim..');\n  const tx = await LPVAULT.claimReward();\n  log.debug('tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function lpvaultWithdraw() {\n  log.debug('lpvaultWithdraw..');\n  const tx = await LPVAULT.withdrawLPToken();\n  log.debug('tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function lpvaultTest1() {\n  const amountWei = eth2wei('50000');\n  const to = '0x3EfA8dA6001Fa333b37912b4C375Fc37073AA51f';\n  const tx = await TOKEN.transfer(to, amountWei);\n  log.debug('tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function checkPool() {\n  const posAddr = await IPP._poolLockPeriod();\n  console.log({ posAddr });\n}\n\nasync function bcvSetPricingScale(pctg) {\n  log.debug('bcvSetPricingScale..');\n  const tx = await BCV.setPricingScale(pctg);\n  log.debug('tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function getSignature(msg) {\n  log.debug('getSignature..');\n  const sig = await SIGNER.signMessage(msg);\n  log.debug('sig: ' + sig);\n  return sig;\n}\n\nasync function voteData(userNFTId) {\n  const block = await PROVIDER.getBlock();\n  const ts = block.timestamp;\n\n  const stat = await VOTE1.stat();\n  // participants.length, NUM_CHOICE, bestChoice, getVoteResult()\n  const numParticipants = stat[0].toNumber();\n  const numChoice = stat[1].toNumber();\n  const bestChoice = stat[2].toNumber();\n  const pctg = stat[3].toNumber();\n  const multiplier = pctg / 20;\n\n  const choices = [];\n  for (let i = 1; i <= numChoice; i++) {\n    const numVotes = await VOTE1.choiceStat(i);\n    choices.push({ choiceId: i, numVotes: numVotes.toNumber(), voters: [] });\n  }\n\n  let nextVoteTime = 0;\n  for (let i = 0; i < numParticipants; i++) {\n    const nftId = await VOTE1.getParticipantAtIndex(i);\n    const nftStat = await VOTE1.nftStat(nftId);\n    // nftId2choice[nftId], nftId2nextVote[nftId]\n    const index = nftStat[0].toNumber() - 1;\n    choices[index].voters.push(nftId.toNumber());\n    if (nftId.toString() === userNFTId + '') {\n      nextVoteTime = nftStat[1].toNumber();\n    }\n  }\n\n  const mayVote = userNFTId > 0 && nextVoteTime < ts;\n\n  const ret = {\n    numParticipants,\n    bestChoice,\n    pctg,\n    multiplier,\n    choices,\n    nextVoteTime,\n    mayVote\n  }\n\n  log.debug('** voteData **');\n  log.debug(ret);\n  return ret;\n}\n\nasync function voteChoice(choiceId, nftId) {\n  log.debug('voteChoice..');\n  const tx = await VOTE1.vote(choiceId, nftId);\n  log.debug('tx: ' + tx.hash);\n  await tx.wait();\n  return tx.hash;\n}\n\nasync function adminData() {\n  const priceArb = await getPriceInfo(BUYER_ADDRESS);\n  const userAddress = await SIGNER.getAddress();\n  const priceUser = await getPriceInfo(userAddress);\n  log.debug({ priceArb, priceUser });\n}\n\n\nexport default {\n  // module.exports = {\n  EURL,\n  ZERO18,\n  ZERO6,\n  CHAIN_ID,\n  ROUTER_ADDRESS,\n  TREASURY_ADDRESS,\n  BUYER_ADDRESS,\n  detectMetamask,\n  loadMetamask,\n  loadPrivateKey,\n  loadWalletRandom,\n  loadWallet,\n  wei2eth,\n  eth2wei,\n  userData,\n  ethTransfer,\n  tokenApprove,\n  tokenBurnAll,\n  nftData,\n  usdtApprove,\n  routerBuyUsdt,\n  routerBuyToken,\n  nftMint,\n  nftBurn,\n  nftWithdraw,\n  nftUpdate,\n  nftClaim,\n  nftSendRevenue,\n  treasuryData,\n  coinToToken,\n  coinToTokenFromDex,\n  tokenToCoin,\n  swapCoinToToken,\n  swapTokenToCoin,\n  treasuryUpdate,\n  buyerData,\n  buyerBuy,\n  buyerUpdate,\n  runArbitrage,\n  lpvaultData,\n  lpvaultUpdate,\n  lpvaultApprove,\n  lpvaultStake,\n  lpvaultUnstake,\n  lpvaultClaim,\n  lpvaultWithdraw,\n  lpvaultTest1,\n  bcvSetPricingScale,\n  getSignature,\n  voteData,\n  voteChoice,\n  adminData\n};\n\n\n","import React from 'react';\nimport { View, Text, ScrollView, ActivityIndicator, Image, TextInput, CheckBox, FlatList } from 'react-native';\nimport { Button } from 'react-native-elements';\nimport screen from '../screen';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport Lib from '../Lib';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport Modal from 'modal-enhanced-react-native-web';\nimport log from 'loglevel';\nimport evmLib from '../evmLib';\n\nconst vp = screen.vp;\n\nfunction to2dec(amount) {\n  return (Math.round(Number(amount) * 100) / 100);\n}\n\nclass Analytic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ts: 0\n    };\n  }\n\n  async componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({ ts: moment().unix() });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  renderHeader() {\n    const s = { flex: 1 };\n    const ts1 = { fontWeight: 'bold' };\n    const ts2 = { fontWeight: 'bold', textAlign: 'right' };\n    return (<View style={{}}>\n      <View style={{ backgroundColor: 'black', borderBottomWidth: 1, padding: 2 * vp, alignItems: 'center', justifyContent: 'center' }}>\n        <Text style={{ color: 'white', textAlign: 'center', fontWeight: 'bold' }}>LP Vault Reward History</Text>\n      </View>\n      <View style={{ flexDirection: 'row', padding: 2 * vp }}>\n        <View style={{ flex: 1 }}>\n          <Text style={ts1}>XYZ Minted</Text>\n        </View>\n        <View style={{ flex: 1 }}>\n          <Text style={ts2}>Total LP Staked</Text>\n        </View>\n        <View style={{ flex: 1 }}>\n          <Text style={ts2}>XYZ/LP Reward</Text>\n        </View>\n        <View style={{ flex: 1 }}>\n          <Text style={ts2}>Timestamp</Text>\n        </View>\n      </View>\n    </View>\n    );\n  }\n\n  renderRow(item, index) {\n    const ts1 = {};\n    const ts2 = { textAlign: 'right' };\n    return (\n      <View style={{ flexDirection: 'row', backgroundColor: 'white', padding: 2 * vp }}>\n        <View style={{ flex: 1 }}>\n          <Text style={ts1}>{Math.floor(item.reward)}</Text>\n        </View>\n        <View style={{ flex: 1 }}>\n          <Text style={ts2}>{Math.floor(item.totLP)}</Text>\n        </View>\n        <View style={{ flex: 1 }}>\n          <Text style={ts2}>{to2dec(item.rps)}</Text>\n        </View>\n        <View style={{ flex: 1 }}>\n          <Text style={ts2}>{item.datetime}</Text>\n        </View>\n      </View>\n    );\n  }\n\n  renderStatCell(title, value) {\n    const ts1 = { textAlign: 'center' };\n    const ts2 = { textAlign: 'center', fontWeight: 'bold', fontSize: 24 };\n    return (\n      <View style={{\n        flex: 1, padding: 2 * vp,\n        borderWidth: 1, borderColor: 'gainsboro', alignItems: 'center', justifyContent: 'center'\n      }}>\n        <Text style={ts1}>{title}</Text>\n        <Text style={ts2}>{value}</Text>\n      </View>\n    );\n  }\n\n  renderStat() {\n    const space = <View style={{ width: vp, height: vp }} />\n    const lp = this.props.lpvaultData;\n    const td = this.props.treasuryData;\n    const nd = this.props.nftData;\n\n    const ta = td && td.balanceUSDT ? '$' + Math.floor(td.balanceUSDT) : '-';\n    const cm = nd && nd.dataList ? nd.totalNFT + '/100 NFT' : '-';\n    const ps = nd && nd.dataList ? (nd.totalNFT * 1000) + ' CFX' : '-';\n    const vs = lp && lp.valueStaked ? '$' + lp.valueStaked : '-';\n\n    let nut = '-';\n    if (nd && nd.nextUpdateTime) {\n      let dt = nd.nextUpdateTime - moment().unix();\n      if (dt < 0) dt = 0;\n      nut = Lib.remainingText(dt);\n    }\n    return (\n      <View style={{ backgroundColor: 'white' }}>\n        <View style={{ flex: 1, flexDirection: 'row' }}>\n          <View style={{ flex: 1 }}>\n            {this.renderStatCell('Treasury Assets', ta)}\n          </View>\n          {space}\n          <View style={{ flex: 1 }}>\n            {this.renderStatCell('Cult Members', cm)}\n          </View>\n        </View>\n        {space}\n        <View style={{ flex: 1, flexDirection: 'row' }}>\n          <View style={{ flex: 1 }}>\n            {this.renderStatCell('PoS Staked', ps)}\n          </View>\n          {space}\n          <View style={{ flex: 1 }}>\n            {this.renderStatCell('LP Vault Staked', vs)}\n          </View>\n        </View>\n        {space}\n        {/* <View style={{ flex: 1, flexDirection: 'row' }}>\n          <View style={{ flex: 1 }}>\n            {this.renderStatCell('Next Mint to Daily Reward', ps)}\n          </View>\n          {space}\n          <View style={{ flex: 1 }}>\n            {this.renderStatCell('Next Mint to LP Vault', vs)}\n          </View>\n        </View>\n        {space} */}\n        <View style={{ flex: 1 }}>\n          {this.renderStatCell('Next Epoch', nut)}\n        </View>\n      </View>\n    );\n  }\n\n  render() {\n    let rows = [];\n    const lpvd = this.props.lpvaultData;\n    if (lpvd && lpvd.rewardHistory) {\n      rows = lpvd.rewardHistory;\n    }\n    return (\n      <View style={{ flex: 1, backgroundColor: 'white', maxWidth: 100 * vp, padding: 2 * vp }}>\n        {this.renderStat()}\n        <Text> </Text>\n        <View style={{ borderWidth: 1, borderColor: 'gainsboro' }}>\n          <FlatList\n            data={rows}\n            renderItem={({ item, index }) => this.renderRow(item, index)}\n            ListHeaderComponent={() => this.renderHeader()}\n            ItemSeparatorComponent={() => {\n              return (\n                <View style={{ backgroundColor: 'gainsboro', height: 1 }} />\n              );\n            }}\n          />\n        </View>\n      </View>\n    );\n  }\n\n}\n\nexport default Analytic;\n","import axios from 'axios';\n\nconst URL = 'https://bitter-octopus-35.telebit.io'; // 'https://6d0e-141-145-204-58.eu.ngrok.io';\n\nasync function setNFTImage(selectedFile, nftId, address, signature) {\n  // Create an object of formData\n  const formData = new FormData();\n\n  // Update the formData object\n  formData.append(\n    \"file\",\n    selectedFile,\n    selectedFile.name\n  );\n\n  formData.append('nftId', nftId);\n  formData.append('address', address);\n  formData.append('signature', signature);\n\n\n  // Request made to the backend api\n  // Send formData object\n  await axios.post(URL + '/nft-image-upload', formData);\n}\n\nfunction getNFTURL(nftId) {\n  return URL + '/nft-image?nftId=' + nftId;\n}\n\n\nexport default {\n  setNFTImage,\n  getNFTURL\n};\n\n","import React from 'react';\nimport { View, Text, ScrollView, ActivityIndicator, Image, TextInput, CheckBox, FlatList } from 'react-native';\nimport { Button } from 'react-native-elements';\nimport screen from '../screen';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport Lib from '../Lib';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport Modal from 'modal-enhanced-react-native-web';\nimport log from 'loglevel';\nimport evmLib from '../evmLib';\nimport daoLib from '../daoLib';\n\nconst vp = screen.vp;\nconst vps = screen.vps;\nconst spc2 = <View style={{ width: vps(2), height: vps(2) }} />;\nconst spc1 = <View style={{ width: vps(1), height: vps(1) }} />;\n\nfunction to4dec(amount) {\n  return (Math.round(Number(amount) * 10000) / 10000);\n}\n\nclass DAO extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ts: 0,\n      imageTs: 1\n    };\n  }\n\n  async componentDidMount() {\n    // this.interval = setInterval(() => {\n    //   this.setState({ ts: moment().unix() });\n    // }, 1000);\n    await this.refreshData();\n  }\n\n  componentWillUnmount() {\n    // clearInterval(this.interval);\n  }\n\n  async refreshData() {\n    const nftId = this.props.selectedNFT;\n    const voteData = await evmLib.voteData(nftId);\n    this.setState({ voteData });\n  }\n\n  onFileChange(event) {\n    console.log(event.target);\n    this.setState({ selectedFile: event.target.files[0] });\n  };\n\n  async uploadImage() {\n    this.setState({ modalVisible: true, modalResult: null });\n    const selectedFile = this.state.selectedFile;\n    const nftId = this.props.selectedNFT;\n    const ud = this.props.userData;\n    const msg = 'Set image for NFT #' + nftId;\n\n    const signature = await evmLib.getSignature(msg);\n    const address = ud ? ud.userAddress : false;\n    try {\n      await daoLib.setNFTImage(selectedFile, nftId, address, signature);\n      this.setState({ modalResult: 'success', imageTs: moment().unix() });\n    } catch (err) {\n      console.error(err);\n      this.setState({ modalResult: 'fail' });\n    }\n  }\n\n  async voteChoice(choiceId) {\n    const nftId = this.props.selectedNFT;\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.voteChoice(choiceId, nftId);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  renderModalTx() {\n    let indicator = <ActivityIndicator color='gray' size='large' />;\n    let msg = 'PROCESSING TX';\n    let btnClose = <Button type=\"outline\" title='CLOSE' onPress={() => this.setState({ modalTxVisible: false })} />;\n    if (this.state.txHash) {\n      msg = 'PROCESS TX DONE';\n      const txHash = this.state.txHash;\n      indicator = <Button type=\"outline\" title='OPEN ON EXPLORER' onPress={() => Lib.openUrl(evmLib.EURL + '/tx/' + txHash)} />\n    } else if (this.state.txError) {\n      msg = 'PROCESS TX FAIL';\n      indicator = <Text style={{ textAlign: 'center', color: 'red' }}>{this.state.txError}</Text>\n    } else {\n      btnClose = null;\n    }\n\n    return (\n      <Modal\n        isVisible={this.state.modalTxVisible}\n        onBackdropPress={() => this.setState({ modalTxVisible: false })}\n      >\n        <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n          <View style={{ backgroundColor: 'white', padding: 2 * vp, width: 300 }}>\n            <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n              <Text> </Text>\n              <Text style={{ textAlign: 'center' }}>{msg}</Text>\n              <Text> </Text>\n            </View>\n            <View>\n              {indicator}\n              <View style={{ height: vp }} />\n              {btnClose}\n            </View>\n          </View>\n        </View>\n      </Modal>\n    );\n  }\n\n  renderModal() {\n    let msg = 'SET NFT IMAGE';\n    let btnClose;\n\n    if (this.state.modalResult === 'success') {\n      msg = 'SET NFT IMAGE DONE';\n      btnClose = <Button type=\"outline\" title='CLOSE' onPress={() => this.setState({ modalVisible: false })} />;\n    } else if (this.state.modalResult === 'fail') {\n      msg = 'SET NFT IMAGE FAIL';\n      btnClose = <Button type=\"outline\" title='CLOSE' onPress={() => this.setState({ modalVisible: false })} />;\n    } else {\n      btnClose = <ActivityIndicator color='gray' size='large' />;\n    }\n\n    return (\n      <Modal\n        isVisible={this.state.modalVisible}\n        onBackdropPress={() => this.setState({ modalVisible: false })}\n      >\n        <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n          <View style={{ backgroundColor: 'white', padding: 2 * vp, width: 300 }}>\n            <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n              <Text> </Text>\n              <Text style={{ textAlign: 'center' }}>{msg}</Text>\n              <Text> </Text>\n              {btnClose}\n            </View>\n          </View>\n        </View>\n      </Modal>\n    );\n  }\n\n\n  render() {\n    let enableSetImg = false;\n    let enableOpenExpl = false;\n    let nftUrl;\n\n    const nd = this.props.nftData;\n    let imgWidth = this.state.nftImgWidth ? this.state.nftImgWidth : 0;\n\n    const nftId = this.props.selectedNFT;\n    let nftImg = (\n      <View onLayout={e => {\n        const w = e.nativeEvent.layout.width;\n        this.setState({ nftImgWidth: w });\n      }} style={{ backgroundColor: 'dimgray', alignItems: 'center', justifyContent: 'center', height: imgWidth }} >\n        <Text style={{ textAlign: 'center', color: 'white' }}>You dont have cult NFT</Text>\n      </View>\n    );\n\n\n    if (nftId > 0 && imgWidth > 0) {\n      enableOpenExpl = true;\n      enableSetImg = this.state.selectedFile ? true : false;\n      nftUrl = 'https://evm.confluxscan.io/nft/0xf6d767ed934e7b2cbb000d65c1b7fb715f16d74c/' + nftId;\n      const url = daoLib.getNFTURL(nftId) + '&ts=' + this.state.imageTs;\n      nftImg = (\n        <Image\n          style={{ width: imgWidth, height: imgWidth }}\n          source={{ uri: url }}\n        />\n      );\n    }\n\n    return (\n      <View style={{ flex: 1, flexDirection: 'row', backgroundColor: 'white', maxWidth: vps(100), padding: vps(2), borderWidth: 0 }}>\n        {this.renderModal()}\n        {this.renderModalTx()}\n        <View style={{ flex: 1 }}>\n          <View style={{ flex: 1, borderWidth: 1, borderColor: 'gainsboro', padding: vps(2) }}>\n            {nftImg}\n            <Text> </Text>\n            <input type=\"file\" accept=\"image/png, image/jpeg\" onChange={e => this.onFileChange(e)} />\n            <Text> </Text>\n            <Button disabled={!enableSetImg} title='Set NFT Image' onPress={() => this.uploadImage()} />\n            <View style={{ height: vps(1) }} />\n            <Button disabled={!enableOpenExpl} type='outline' title='Open on Explorer' onPress={() => Lib.openUrl(nftUrl)} />\n          </View>\n        </View>\n        {spc2}\n        <View style={{ flex: 1 }}>\n          {this.renderVotePanel()}\n        </View>\n      </View>\n    );\n  }\n\n  renderVotePanel() {\n    let mayVote = false;\n    const vd = this.state.voteData;\n    if (vd && vd.mayVote) mayVote = true;\n    const data = {\n      title: 'DAO Vote #1: LP Vault Boost',\n      opts: [\n        { label: 'APR x1', cb: () => this.voteChoice(1) },\n        { label: 'APR x10', cb: () => this.voteChoice(2) },\n        { label: 'APR x50', cb: () => this.voteChoice(3) }\n      ]\n    }\n\n    if (vd) {\n      const bestChoice = vd.bestChoice;\n      if (bestChoice > 0) data.opts[bestChoice - 1].winner = true;\n      data.opts[0].voters = vd.choices[0].voters;\n      data.opts[1].voters = vd.choices[1].voters;\n      data.opts[2].voters = vd.choices[2].voters;\n    }\n\n    console.log(data);\n\n    return (\n      <View style={{ flex: 1, borderColor: 'gainsboro', borderWidth: 1 }}>\n        <View style={{ borderColor: 'gainsboro', borderBottomWidth: 1, padding: vps(2), backgroundColor: 'black' }}>\n          <Text style={{ textAlign: 'center', color: 'white' }}>{data.title.toUpperCase()}</Text>\n        </View>\n        {\n          data.opts.map((item, i) => {\n            let winnerLabel = null;\n            if (item.winner) winnerLabel = <Text style={{ color: 'green' }}>[MOST VOTES]</Text>;\n            let voters = (<View style={{ height: 32, justifyContent: 'center' }}>\n              <Text style={{ color: 'gray' }}>NO VOTE</Text>\n            </View>\n            );\n            if (item.voters && item.voters.length > 0) {\n              voters = (\n                <ScrollView horizontal>\n                  <View style={{ flexDirection: 'row' }}>\n                    {\n                      item.voters.map((item2, i) => {\n                        const url = daoLib.getNFTURL(item2) + '&thumb=1';\n                        return (\n                          <View style={{ paddingRight: 5 }}>\n                            <Image\n                              style={{ width: 32, height: 32 }}\n                              source={{ uri: url }}\n                            />\n                          </View>\n                        );\n                      })\n                    }\n                  </View>\n                </ScrollView>\n              );\n            }\n            return (\n              <View style={{ borderColor: 'gainsboro', borderBottomWidth: 1 }}>\n                <View style={{ flexDirection: 'row', padding: vps(2) }}>\n                  <View style={{ flex: 1, justifyContent: 'center' }}>\n                    <Text style={{ textAlign: 'left' }}>{item.label} {winnerLabel}</Text>\n                  </View>\n                  <Button disabled={!mayVote} title='Vote' onPress={() => item.cb()} />\n                </View>\n                <View style={{ flexDirection: 'row', paddingHorizontal: vps(2), paddingVertical: vps(1), borderColor: 'gainsboro', borderTopWidth: 1 }}>\n                  {voters}\n                </View>\n              </View>\n            );\n          })\n        }\n        <View style={{ padding: vps(2) }}>\n          <Button type='outline' title='Discussion' onPress={() => Lib.openUrl('https://t.me/dragoncultxyz')} />\n        </View>\n      </View>\n    );\n  }\n\n}\n\nexport default DAO;\n","import React from 'react';\nimport { View, Text, ScrollView, ActivityIndicator, Image, TextInput, CheckBox, FlatList } from 'react-native';\nimport { Button } from 'react-native-elements';\nimport screen from '../screen';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport Lib from '../Lib';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport Modal from 'modal-enhanced-react-native-web';\nimport log from 'loglevel';\nimport evmLib from '../evmLib';\nimport daoLib from '../daoLib';\n\nconst vp = screen.vp;\nconst vps = screen.vps;\nconst spc2 = <View style={{ width: vps(2), height: vps(2) }} />;\nconst spc1 = <View style={{ width: vps(1), height: vps(1) }} />;\n\nfunction to4dec(amount) {\n  return (Math.round(Number(amount) * 10000) / 10000);\n}\n\nclass Panels extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  async componentDidMount() {\n    // this.interval = setInterval(() => {\n    //   this.setState({ ts: moment().unix() });\n    // }, 1000);\n    await this.refreshData();\n  }\n\n  componentWillUnmount() {\n    // clearInterval(this.interval);\n  }\n\n  async refreshData() {\n  }\n\n  renderPanel(title, desc, btnTitle, cb, disable, iconName) {\n    if (!iconName) iconName = 'question';\n    return (\n      <View style={{ flex: 1, borderWidth: 1, borderColor: 'gainsboro', padding: vp * 2, backgroundColor: 'white' }}>\n        <Text style={{ textAlign: 'center', fontWeight: 'bold' }}>{title.toUpperCase()}</Text>\n        <View style={{ flex: 1, alignItems: 'center' }}>\n          <Text> </Text>\n          <Icon name={iconName} size={32} color=\"black\" />\n          <Text> </Text>\n          <View style={{ flex: 1 }}>\n            <Text style={{ textAlign: 'center' }}>\n              {desc}\n            </Text>\n          </View>\n          <Text> </Text>\n        </View>\n        <Button disabled={disable} title={btnTitle} onPress={() => cb()} />\n      </View>\n    );\n  }\n\n\n  renderPanelJoin() {\n    const pd = this.props.panelsData;\n    const selectedNFT = pd.selectedNFT;\n    const userETH = pd.userETH;\n    const nftPendingWithdraw = pd.nftPendingWithdraw;\n    let desc = 'Stake 1000 CFX and mint NFT to join.';\n    let disable = true;\n\n    const txt1 = 'Stake 1000 CFX and mint NFT to join.';\n    if (selectedNFT && selectedNFT > 0) {\n      desc = (\n        <View>\n          <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n          <Text style={{ textAlign: 'center', color: 'green' }}>[already own NFT]</Text>\n        </View>\n      );\n    } else if (nftPendingWithdraw) {\n      desc = (\n        <View>\n          <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n          <Text style={{ textAlign: 'center', color: 'red' }}>[unstake not finished]</Text>\n        </View>\n      );\n    } else {\n      if (Number(userETH) > 1000) {\n        disable = false;\n      } else {\n        desc = (\n          <View>\n            <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n            <Text style={{ textAlign: 'center', color: 'red' }}>[not enough CFX]</Text>\n          </View>\n        );\n      }\n    }\n\n    return this.renderPanel('Join', desc, 'Mint NFT', () => this.props.onClickJoin(), disable, 'sign-in');\n  }\n\n  renderPanelLeave() {\n    const pd = this.props.panelsData;\n    const txt1 = 'Burn NFT and unstake 1000 CFX to leave.';\n    const ts = pd.ts;\n    const selectedNFT = pd.selectedNFT;\n    const nftPendingWithdraw = pd.nftPendingWithdraw;\n    const nftPendingWithdrawDeadline = pd.nftPendingWithdrawDeadline;\n    const nftMayWithdraw = pd.nftMayWithdraw;\n    const nftDataList = pd.nftDataList;\n\n    let desc = (\n      <View>\n        <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n        <Text style={{ textAlign: 'center', color: 'red' }}>[cult access]</Text>\n      </View >\n    );\n\n    if (nftPendingWithdraw) {\n      if (nftMayWithdraw) {\n        const disable = false;\n        desc = (\n          <View>\n            <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n            <Text style={{ textAlign: 'center', color: 'green' }}>[1000 CFX can be unstaked]</Text>\n          </View >\n        );\n        return this.renderPanel('Leave', desc, 'Unstake CFX', () => this.props.onClickWithdraw(), disable, 'sign-out');\n      } else {\n        const disable = true;\n        const deadlineStr = moment.unix(nftPendingWithdrawDeadline).format('DD MMM HH:mm');\n        desc = (\n          <View>\n            <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n            <Text style={{ textAlign: 'center', color: 'red' }}>[unstake enable on {deadlineStr}]</Text>\n          </View >\n        );\n        return this.renderPanel('Leave', desc, 'Unstake CFX', () => { }, true, 'sign-out');\n      }\n    }\n\n    if (selectedNFT && selectedNFT > 0) {\n      desc = (\n        <View>\n          <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n        </View >\n      );\n    }\n\n    let disable = true;\n    if (selectedNFT && selectedNFT > 0) {\n      const dataListByKey = _.keyBy(nftDataList, 'id');\n      const selectedNFTData = dataListByKey[selectedNFT];\n      const allowBurnTime = selectedNFTData.allowBurnTime;\n      if (ts > allowBurnTime) {\n        disable = false;\n      } else {\n        const msg = '[burn after ' + moment.unix(allowBurnTime).format('DD MMM HH:mm') + ']';\n        desc = (\n          <View>\n            <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n            <Text style={{ textAlign: 'center', color: 'red' }}>{msg}</Text>\n          </View >\n        );\n      }\n    }\n\n\n    return this.renderPanel('Leave', desc, 'Burn NFT', () => this.props.onClickLeave(), disable, 'sign-out');\n  }\n\n  renderPanelClaim() {\n    const pd = this.props.panelsData;\n    const rewardPerNFT = pd.rewardPerNFT;\n    const nextUpdateTime = pd.nextUpdateTime;\n    const selectedNFT = pd.selectedNFT;\n    const nftDataList = pd.nftDataList;\n    const nftSession = pd.nftSession;\n\n    const txt1 = 'Receive ' + rewardPerNFT + ' XYZ every 24 hours.';\n    let desc = (\n      <View>\n        <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n        <Text style={{ textAlign: 'center', color: 'red' }}>[cult access]</Text>\n      </View >\n    );\n\n    let disable = true;\n    if (selectedNFT && selectedNFT > 0) {\n      const key = selectedNFT + '';\n      const dataListByKey = _.keyBy(nftDataList, 'id');\n      const selectedNFTData = dataListByKey[key];\n      if (\n        selectedNFTData.session < nftSession\n        && Number(rewardPerNFT) > 0\n      ) {\n        desc = (\n          <View>\n            <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n            <Text style={{ textAlign: 'center', color: 'green' }}>[claim now]</Text>\n          </View >\n        );\n        disable = false;\n      } else {\n        desc = (\n          <View>\n            <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n            <Text style={{ textAlign: 'center', color: 'red' }}>[claim after {moment.unix(nextUpdateTime).format('DD MMM HH:mm')}]</Text>\n          </View >\n        );\n      }\n    }\n    return this.renderPanel('Claim', desc, 'Claim XYZ', () => this.props.onClickClaim(), disable, 'gift');\n  }\n\n  renderPanelBurn() {\n    const pd = this.props.panelsData;\n    const sellPrice = pd.sellPrice;\n    const selectedNFT = pd.selectedNFT;\n    let disable = true;\n\n    const txt1 = 'Swap XYZ for USDT. 1 XYZ = ' + sellPrice + ' USDT.'\n    let desc = (\n      <View>\n        <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n        <Text style={{ textAlign: 'center', color: 'red' }}>[cult access]</Text>\n      </View >\n    );\n\n    if (selectedNFT && selectedNFT > 0) {\n      desc = (\n        <View>\n          <Text style={{ textAlign: 'center' }}>{txt1}</Text>\n        </View >\n      );\n      disable = false;\n    }\n\n    return this.renderPanel('Swap', desc, 'Swap XYZ', () => this.props.onClickSell(), disable, 'refresh');\n  }\n\n  renderPanelStake() {\n    const pd = this.props.panelsData;\n    const apr = pd && pd.apr > 0 ? Math.floor(pd.apr) : '';\n    const ts1 = { textAlign: 'center', color: 'white', fontWeight: 'bold', fontSize: 24 };\n\n    return (\n      <View style={{ flex: 1 }}>\n        <View style={{ backgroundColor: 'green', padding: vps(2) }}>\n          <Text style={ts1}>STAKING</Text>\n        </View>\n        <View style={{ flex: 1, borderWidth: 1, borderColor: 'gainsboro', padding: vp * 2, backgroundColor: 'white' }}>\n          <View style={{ flex: 1, alignItems: 'center' }}>\n            <Text> </Text>\n            <Icon name='flask' size={32} color=\"black\" />\n            <Text> </Text>\n            <View style={{ flex: 1 }}>\n              <Text style={{ textAlign: 'center' }}>\n                <View style={{ justifyContent: 'center', alignItems: 'center', height: 60 }}>\n                  <Text style={{ textAlign: 'center' }}>\n                    LP Staking Vault.\n                  </Text>\n                  <Text style={{ textAlign: 'center' }}>\n                    Stake Swappi XYZ-USDT LP token for <Text style={{ fontWeight: 'bold' }}>{apr}% APR.</Text>\n                  </Text>\n                </View >\n              </Text>\n            </View>\n            <Text> </Text>\n          </View>\n          <Button disabled={false} title={'Stake LP'} onPress={() => this.props.onClickStake()} />\n        </View>\n      </View>\n    );\n  }\n\n  renderPanelBonding() {\n    const pd = this.props.panelsData;\n    const bonus = pd?.bonus;\n    const bonusSampleAmount = pd?.bonusSampleAmount;\n    const ts1 = { textAlign: 'center', color: 'white', fontWeight: 'bold', fontSize: 24 };\n\n    return (\n      <View style={{ flex: 1 }}>\n        <View style={{ backgroundColor: 'green', padding: vps(2) }}>\n          <Text style={ts1}>BONDING</Text>\n        </View>\n        <View style={{ flex: 1, borderWidth: 1, borderColor: 'gainsboro', padding: vp * 2, backgroundColor: 'white' }}>\n          <View style={{ flex: 1, alignItems: 'center' }}>\n            <Text> </Text>\n            <Icon name='lock' size={32} color=\"black\" />\n            <Text> </Text>\n            <View style={{ flex: 1 }}>\n              <Text style={{ textAlign: 'center' }}>\n                <View style={{ justifyContent: 'center', alignItems: 'center', height: 60 }}>\n                  <Text style={{ textAlign: 'center' }}>\n                    Trade XYZ at discounted price.\n                  </Text>\n                  <Text style={{ textAlign: 'center' }}>\n                    Get <Text style={{ fontWeight: 'bold' }}>+{bonus}% </Text> more XYZ than Swappi for {bonusSampleAmount} USDT.\n                  </Text>\n                </View >\n              </Text>\n            </View>\n            <Text> </Text>\n          </View>\n          <Button disabled={false} title={'Trade'} onPress={() => this.props.onClickSwap()} />\n        </View>\n      </View>\n    );\n  }\n\n  renderHowTo() {\n    const title = 'Optimal Strategy for Bonding & Staking';\n    return (\n      <View style={{ alignItems: 'center', padding: vps(4) }}>\n        <Text style={{ textAlign: 'center', fontWeight: 'bold' }}>{title.toUpperCase()}</Text>\n        <Text> </Text>\n        <View>\n          <Text>1. Trade for USDT in Swappi.</Text>\n          <Text>2. Use BONDING to swap half USDT for XYZ.</Text>\n          <Text>3. Provide liquidity for XYZ-USDT in Swappi to get LP token.</Text>\n          <Text>4. Use STAKING to stake XYZ-USDT LP token for yield.</Text>\n          <Text>5. Claim XYZ yield and sell half for USDT in Swappi.</Text>\n          <Text>6. Back to step 3 to reinvest for more yield.</Text>\n        </View>\n        <Text> </Text>\n        <Text> </Text>\n      </View>\n    );\n  }\n\n  renderTitle() {\n    const title = 'Dragon Cult XYZ';\n    const msg = 'Low volatile - DAO controlled - treasury token, with high APR through bonding & staking mechanism.';\n    return (\n      <View style={{ paddingHorizontal: vps(2) }}>\n        {spc2}\n        <View style={{ borderWidth: 1, borderColor: 'gainsboro', padding: vps(2) }}>\n          <Text style={{ textAlign: 'center', fontWeight: 'bold' }}>{title.toUpperCase()}</Text>\n          <Text> </Text>\n          <Text style={{ textAlign: 'center' }}>{msg}</Text>\n        </View>\n      </View>\n    );\n  }\n\n\n  render() {\n    const ts1 = { textAlign: 'center', color: 'white', fontWeight: 'bold', fontSize: 24 };\n    return (\n      <View style={{ flex: 1, backgroundColor: 'white', maxWidth: vps(100), borderWidth: 0 }}>\n        {this.renderTitle()}\n        <View style={{ flexDirection: 'row', padding: vps(2) }}>\n          <View style={{ flex: 1 }}>\n            {this.renderPanelStake()}\n          </View>\n          {spc2}\n          <View style={{ flex: 1 }}>\n            {this.renderPanelBonding()}\n          </View>\n        </View>\n        {/* {this.renderHowTo()} */}\n        <View style={{ height: vps(2), backgroundColor: 'gainsboro' }} />\n        <View style={{ borderBottomWidth: 1, borderColor: 'gainsboro', padding: vps(2) }}>\n          <Text style={{ textAlign: 'center', color: 'dimgray', fontWeight: 'bold' }}>DRAGON CULT NFT</Text>\n        </View>\n        <View style={{ flexDirection: 'row', padding: vps(2) }}>\n          <View style={{ flex: 1 }}>{this.renderPanelJoin()}</View>\n          {spc2}\n          <View style={{ flex: 1 }}>{this.renderPanelLeave()}</View>\n        </View>\n        <View style={{ flexDirection: 'row', padding: vps(2) }}>\n          <View style={{ flex: 1 }}>{this.renderPanelClaim()}</View>\n          {spc2}\n          <View style={{ flex: 1 }}>{this.renderPanelBurn()}</View>\n        </View>\n      </View>\n    );\n  }\n\n\n}\n\nexport default Panels;\n","import React from 'react';\nimport { View, Text, ScrollView, ActivityIndicator, Image, TextInput, CheckBox } from 'react-native';\nimport { Button, ButtonGroup } from 'react-native-elements';\nimport screen from '../screen';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport Lib from '../Lib';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport Modal from 'modal-enhanced-react-native-web';\nimport log from 'loglevel';\nimport evmLib from '../evmLib';\nimport Analytic from './Analytic';\nimport DAO from './DAO';\nimport Panels from './Panels';\nimport { TouchableOpacity } from 'react-native-web';\n\nconst vp = screen.vp;\nconst vps = screen.vps;\nconst landscape = screen.landscape;\nconst spc = <View style={{ width: vps(2), height: vps(2) }} />;\nconst textColor1 = 'white';\nconst TOKEN = 'XYZ';\nconst USDT = 'USDT';\nconst ETH = 'CFX';\n\nconst TITLE = {};\nTITLE['mint'] = 'JOIN CULT';\nTITLE['claim'] = 'REWARD';\nTITLE['buy'] = 'MINT XYZ';\nTITLE['sell'] = 'BURN XYZ';\nTITLE['stake'] = 'STAKING';\nTITLE['burn'] = 'LEAVE CULT';\n\nconst textStyle1 = { textAlign: 'center', color: textColor1, textTransform: 'uppercase' };\nconst textStyle1b = { textAlign: 'center', color: textColor1, textTransform: 'uppercase', fontWeight: 'bold' };\nconst buttonStyle = { borderColor: 'white', borderWidth: 1 };\nconst titleStyle = { color: 'white' };\n\nfunction to4dec(amount) {\n  return (Math.round(Number(amount) * 10000) / 10000);\n}\n\nfunction to2dec(amount) {\n  return (Math.round(Number(amount) * 100) / 100);\n}\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disclaimerAgree: false,\n      show: 'connecting',\n      connected: false,\n      connecting: false,\n      nftData: {},\n      selectedNFT: 0,\n      treasuryData: {},\n      buyerData: {},\n      lpvaultData: {},\n      contentIndex: 0\n    };\n  }\n\n  async componentDidMount() {\n    await this.connectMetamask();\n  }\n\n  componentWillUnmount() {\n  }\n\n  async connectMetamask() {\n    this.setState({ showMetamaskError: false, connecting: true });\n\n    const showDisclaimer = async () => {\n      const val = await Lib.getStorageValue('DISCLAIMER_HIDE');\n      if (val === 'yes')\n        this.setState({ connected: true, show: 'content' });\n      else if (val === 'no')\n        this.setState({ connected: true, show: 'disclaimer', disclaimerAgree: true });\n      else\n        this.setState({ connected: true, show: 'disclaimer' });\n    }\n\n    try {\n      const connected = await evmLib.detectMetamask();\n      if (connected) {\n        await evmLib.loadMetamask();\n        await this.refreshData();\n        this.setState({ connecting: false });\n        await evmLib.adminData();\n        return showDisclaimer();\n      }\n    } catch (err) {\n      log.error(err.message);\n      if (err.message && err.message === 'Please install Metamask and reload!') {\n        this.setState({ showMetamaskError: 'not installed' });\n      } else if (err.message && err.message === 'Please connect metamask to right network!') {\n        this.setState({ showMetamaskError: 'wrong network' });\n      }\n    }\n\n    // await Lib.clearStorageValue();\n    this.setState({ connected: false, show: 'disconnect' });;\n  }\n\n  async refreshData() {\n    try {\n      const userData = await evmLib.userData();\n      const nftData = await evmLib.nftData();\n      let selectedNFT;\n      if (nftData.userOwnedNFTIds && nftData.userOwnedNFTIds > 0) selectedNFT = nftData.userOwnedNFTIds[0];\n      const treasuryData = await evmLib.treasuryData();\n      const buyerData = await evmLib.buyerData();\n      const lpvaultData = await evmLib.lpvaultData();\n      return this.setState({ connected: true, userData, nftData, selectedNFT, treasuryData, buyerData, lpvaultData });\n    } catch (err) {\n      log.error(err.message);\n    }\n  }\n\n  async buyUSDT(amountETH) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.routerBuyUsdt(amountETH);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async burnAllToken() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.tokenBurnAll();\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async nftMint() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null, modalMintVisible: false });\n    try {\n      const txHash = await evmLib.nftMint();\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async burnNFT(nftId) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    + 'hello';\n    try {\n      const txHash = await evmLib.nftBurn(nftId);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async withdraw(index) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.nftWithdraw(index);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async approveUSDT() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.usdtApprove(evmLib.TREASURY_ADDRESS);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async approveToken() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.tokenApprove(evmLib.TREASURY_ADDRESS);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  setAmountByPctg(pctg, swapType) {\n    const userData = this.state.userData;\n    if (swapType === 'buy') {\n      let numToken = Number(userData.userUSDT) * pctg / 100;\n      if (pctg === 100) numToken = userData.userUSDT;\n      this.setAmountInput(numToken + '', swapType);\n    }\n    if (swapType === 'sell') {\n      let numToken = Number(userData.userToken) * pctg / 100;\n      if (pctg === 100) numToken = userData.userToken;\n      this.setAmountInput(numToken + '', swapType);\n    }\n  }\n\n  async setAmountInput(amount, swapType) {\n    this.setState({ amountInput: amount });\n    if (swapType === 'buy') {\n      let resultSwap = 0;\n      let resultSwapFromDex = 0;\n      if (Number(amount > 0)) {\n        resultSwap = await evmLib.coinToToken(amount);\n        resultSwapFromDex = await evmLib.coinToTokenFromDex(amount);\n      }\n      this.setState({ resultSwap, resultSwapFromDex });\n    } else if (swapType === 'sell') {\n      let resultSwap = 0;\n      let resultSwapFromDex = 0;\n      if (Number(amount > 0)) resultSwap = await evmLib.tokenToCoin(amount);\n      this.setState({ resultSwap, resultSwapFromDex });\n    }\n  }\n\n  async busyProcess() {\n    try {\n      await Lib.delay(5 * 60 * 1000);\n      await this.refreshData();\n    } catch (err) {\n\n    }\n    this.setState({ txError: 'timeout' });\n  }\n\n  async swapCoinToToken(amount, nftId) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n\n    try {\n      const result = await evmLib.runArbitrage(false, nftId);\n      if (result.strategy !== 'stay out') return this.busyProcess();\n    } catch (err) {\n    }\n\n    try {\n      const txHash = await evmLib.swapCoinToToken(amount, nftId);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async swapTokenToCoin(amount, nftId) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n\n    try {\n      const result = await evmLib.runArbitrage(false, nftId);\n      if (result.strategy !== 'stay out') return this.busyProcess();\n    } catch (err) {\n    }\n\n    try {\n      const txHash = await evmLib.swapTokenToCoin(amount, nftId);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async treasuryUpdate() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.treasuryUpdate();\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async nftUpdate() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.nftUpdate();\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async nftClaim(nftId) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.nftClaim(nftId);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async nftWithdraw(index) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.nftWithdraw(index);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async ethTransfer() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.ethTransfer(evmLib.BUYER_ADDRESS, evmLib.eth2wei('1'));\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async buyerBuy() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.buyerBuy();\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async buyerApproveUSDT() {\n    try {\n      const txHash = await evmLib.usdtApprove(evmLib.BUYER_ADDRESS);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async simulateArbitrage(nftId) {\n    this.setState({ simulationResult: false })\n    try {\n      const result = await evmLib.runArbitrage(false, nftId);\n      this.setState({ simulationResult: result })\n    } catch (err) {\n      log.error(err);\n    }\n  }\n\n  async runArbitrage(nftId) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null, simulationResult: null });\n    try {\n      const txHash = await evmLib.runArbitrage(true, nftId);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async buyerUpdate() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.buyerUpdate();\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async lpvaultApprove() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.lpvaultApprove();\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async lpvaultStake(amount) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.lpvaultStake(amount);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async lpvaultUnstake(amount) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.lpvaultUnstake(amount);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async lpvaultClaim() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n\n    try {\n      const check = await evm.nftData();\n      if (check.freezeTime) return this.busyProcess();\n    } catch (err) {\n    }\n\n    try {\n      const txHash = await evmLib.lpvaultClaim();\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async lpvaultWithdraw() {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.lpvaultWithdraw();\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async bcvSetPricingScale(pctg) {\n    this.setState({ modalTxVisible: true, txHash: null, txError: null });\n    try {\n      const txHash = await evmLib.bcvSetPricingScale(pctg);\n      await this.refreshData();\n      this.setState({ txHash: txHash });\n    } catch (err) {\n      log.error(err);\n      const errMsg = err && err.message ? err.message : 'unknown error';\n      this.setState({ txError: errMsg });\n    }\n  }\n\n  async adminAction() {\n    await this.buyUSDT('9000');\n  }\n\n  async test() {\n  }\n\n  renderDisclaimer() {\n    const msg1 = 'The project is currently in its alpha testing phase and have limit of 100 NFT memberships to be minted. NFT owners are incentivized with a 20% staking reward from the circulating supply annually, as well as a daily claim of 10% from the circulating supply annually.';\n    const msg2 = 'Warning: These project are not audited and are provided \"as is\" without any warranties. Use at your own risk. The developers of the project are not liable for any inaccuracies or errors in the information provided. Exercise caution and do your own research before using the project. Source code of the project is open source and can be verified on the blockchain explorer. By using the project, you acknowledge and agree that code is law, the developers take no responsibility and cannot be held liable for any claims, liabilities, hacks, expenses or damages.';\n    const nextPage = async () => {\n      const disclaimerHide = this.state.disclaimerHide;\n      const val = disclaimerHide ? 'yes' : 'no';\n      await Lib.setStorageValue('DISCLAIMER_HIDE', val);\n\n      this.setState({ show: 'content' });\n    };\n\n    return (\n      <View style={{ padding: 15 * vp, backgroundColor: 'black', flex: 1, alignItems: 'flex-start', justifyContent: 'center' }}>\n        <Text style={{ color: 'white', fontWeight: 'bold' }}>Alpha Testing</Text>\n        <Text style={{ color: 'white' }}>{msg1}</Text>\n        <Text> </Text>\n        <Text> </Text>\n        <Text style={{ color: 'white', fontWeight: 'bold' }}>Disclaimer</Text>\n        <Text style={{ color: 'white' }}>{msg2}</Text>\n        <Text> </Text>\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <CheckBox color=\"gray\" style={{}} value={this.state.disclaimerAgree} onValueChange={ok => this.setState({ disclaimerAgree: ok })} />\n          <Text style={{ color: 'white' }}> I understand & agree</Text>\n        </View>\n        <Text> </Text>\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <CheckBox color=\"gray\" style={{}} value={this.state.disclaimerHide} onValueChange={ok => this.setState({ disclaimerHide: ok })} />\n          <Text style={{ color: 'white' }}> Dont show this page again</Text>\n        </View>\n        <Text> </Text>\n        <Button disabled={!(this.state.disclaimerAgree)} style={{}} buttonStyle={buttonStyle} titleStyle={titleStyle}\n          type='outline' title=\"Continue\" onPress={() => nextPage()} />\n        <Text> </Text>\n        <Text> </Text>\n      </View>\n    );\n  }\n\n  renderModalMint() {\n    const msg1 = 'Minting NFT required 1000 CFX to be staked. Burning NFT will unstake and return 1000 CFX.';\n    const msg2 = 'Burn NFT allowed 13 days after minting. Unstake CFX allowed 1 day after burning. Continue to mint?';\n    return (\n      <Modal\n        isVisible={this.state.modalMintVisible}\n        onBackdropPress={() => this.setState({ modalMintVisible: false })}\n      >\n        <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n          <View style={{ backgroundColor: 'white', padding: 2 * vp, width: 300 }}>\n            <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n              <Text> </Text>\n              <Text style={{ textAlign: 'center' }}>{msg1} {msg2}</Text>\n              <Text> </Text>\n            </View>\n            <View style={{ flexDirection: 'column' }}>\n              <View style={{ flex: 1 }}>\n                <Button type=\"outline\" title='YES' onPress={() => this.nftMint()} />\n              </View>\n              <View style={{ width: vp, height: vp }} />\n              <View style={{ flex: 1 }}>\n                <Button type=\"outline\" title='NO' onPress={() => this.setState({ modalMintVisible: false })} />\n              </View>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    );\n  }\n\n  renderModalTx() {\n    let indicator = <ActivityIndicator color='gray' size='large' />;\n    let msg = 'PROCESSING TX';\n    let btnClose = <Button type=\"outline\" title='CLOSE' onPress={() => this.setState({ modalTxVisible: false })} />;\n    if (this.state.txHash) {\n      msg = 'PROCESS TX DONE';\n      const txHash = this.state.txHash;\n      indicator = <Button type=\"outline\" title='OPEN ON EXPLORER' onPress={() => Lib.openUrl(evmLib.EURL + '/tx/' + txHash)} />\n    } else if (this.state.txError) {\n      msg = 'PROCESS TX FAIL';\n      indicator = <Text style={{ textAlign: 'center', color: 'red' }}>{this.state.txError}</Text>\n    } else {\n      btnClose = null;\n    }\n\n    return (\n      <Modal\n        isVisible={this.state.modalTxVisible}\n        onBackdropPress={() => this.setState({ modalTxVisible: false })}\n      >\n        <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n          <View style={{ backgroundColor: 'white', padding: 2 * vp, width: 300 }}>\n            <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n              <Text> </Text>\n              <Text style={{ textAlign: 'center' }}>{msg}</Text>\n              <Text> </Text>\n            </View>\n            <View>\n              {indicator}\n              <View style={{ height: vp }} />\n              {btnClose}\n            </View>\n          </View>\n        </View>\n      </Modal>\n    );\n  }\n\n  renderAdmin() {\n    if (!this.state.connected) return null;\n    const userData = this.state.userData;\n    const buyerData = this.state.buyerData;\n    const nftData = this.state.nftData;\n    const enableBuy = buyerData.mayBuy;\n\n    const enableUpdate = buyerData.mayUpdate;\n    const nextTime = moment.unix(this.state.nftData.nextUpdateTime);\n    let msg = 'Update enable on ' + nextTime.format('DD MMM HH:mm:ss') + '.';\n    if (enableUpdate) {\n      msg = 'Update enabled.';\n    }\n\n    let msgArbitrage = 'Run simulation first.';\n    let enableArbitrage = false;\n    if (this.state.simulationResult) {\n      const strategy = this.state.simulationResult.strategy;\n      if (strategy === 'pump' || strategy === 'dump') enableArbitrage = true;\n      if (!enableArbitrage) msgArbitrage = 'No need to synchronize.';\n      else msgArbitrage = 'Need to synchronize.';\n    }\n\n    const nftId = this.state.selectedNFT;\n    const totalNFT = nftData.totalNFT;\n    const revenue = nftData.revenue;\n\n    const btnApprove = (\n      <View>\n        <Button disabled={!(buyerData.userUSDTAllowance === '0')} style={{ width: 150 }} buttonStyle={buttonStyle} titleStyle={titleStyle} type='outline'\n          title='Approve' onPress={() => this.buyerApproveUSDT()} />\n        <View style={{ height: vp }} />\n      </View>\n    )\n\n    const btnBurnAll = (\n      <View>\n        <Button disabled={!(Number(userData.userToken) > 0)} style={{ width: 150 }} buttonStyle={buttonStyle} titleStyle={titleStyle} type='outline'\n          title='Burn All' onPress={() => this.burnAllToken()} />\n        <View style={{ height: vp, textAlign: 'center' }} />\n      </View>\n    )\n\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', padding: 5 * vp }}>\n        <Text style={textStyle1}>Revenue: {revenue}</Text>\n        <Text style={textStyle1}>Supply NFT: {totalNFT}</Text>\n        <Text> </Text>\n        <View style={{ flexDirection: 'row' }}>\n          {btnBurnAll}\n          <View style={{ width: vp }} />\n          {btnApprove}\n        </View>\n        <Text> </Text>\n        <Text style={textStyle1}>{msgArbitrage}</Text>\n        <Text> </Text>\n        <View style={{ flexDirection: 'row' }}>\n          <Button style={{ width: 150 }} buttonStyle={buttonStyle} titleStyle={titleStyle} disabled={false} type='outline' title='Simulate' onPress={() => this.simulateArbitrage(nftId)} />\n          <View style={{ width: vp }} />\n          <Button style={{ width: 150 }} buttonStyle={buttonStyle} titleStyle={titleStyle} disabled={!enableArbitrage} type='outline' title='Synchronize' onPress={() => this.runArbitrage(nftId)} />\n        </View>\n        <Text> </Text>\n        <Text> </Text>\n        <Text style={textStyle1}>{msg}</Text>\n        <Text> </Text>\n        <View style={{ flexDirection: 'row' }}>\n          <Button style={{ width: 150 }} buttonStyle={buttonStyle} titleStyle={titleStyle} disabled={!enableUpdate} type='outline' title='Update' onPress={() => this.buyerUpdate()} />\n          <View style={{ width: vp }} />\n          <Button style={{ width: 150 }} buttonStyle={buttonStyle} titleStyle={titleStyle} disabled={!enableBuy} type='outline' title='Buy & Burn' onPress={() => this.buyerBuy()} />\n        </View>\n        <Text> </Text>\n        <Text> </Text>\n        <View style={{ flexDirection: 'row' }}>\n          <Button style={{ width: 150 }} buttonStyle={buttonStyle} titleStyle={titleStyle}\n            disabled={false} type='outline' title='Admin Action' onPress={() => this.adminAction()} />\n        </View>\n      </View>\n    );\n  }\n\n  renderDisconnect() {\n    const networkName = 'Conflux eSpace';\n    const chainlistURL = 'https://chainlist.org/chain/1030';\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'black' }}>\n        <View style={{ padding: vp }}>\n          <Button type='outline' buttonStyle={buttonStyle} titleStyle={titleStyle} title='Install Metamask' onPress={() => Lib.openUrl('https://metamask.io')} />\n          <View style={{ height: vp }} />\n          <Button type='outline' buttonStyle={buttonStyle} titleStyle={titleStyle} title={'Switch network to ' + networkName} onPress={() => Lib.openUrl(chainlistURL)} />\n          <View style={{ height: vp }} />\n          <Button type='outline' buttonStyle={buttonStyle} titleStyle={titleStyle} title='Refresh page' onPress={() => window.location.reload()} />\n        </View>\n      </View>\n    );\n  }\n\n  renderPricePanel() {\n    if (!this.state.connected) return null;\n    const nftData = this.state.nftData;\n    const treasuryData = this.state.treasuryData;\n    const sellPrice = treasuryData.sellPrice;\n    const swapSellPrice = treasuryData.swapSellPrice;\n\n    let memberStatus = 'NOT CULT MEMBER';\n    if (nftData.userOwnedNFTIds.length > 0) {\n      memberStatus = 'CULT MEMBER #' + this.state.selectedNFT;\n    }\n\n    const urlTrade = 'https://app.swappi.io/#/swap?inputCurrency=CFX&outputCurrency=0x2eB3a860Ddd8BC2B2621aA99168D414C14802c9f';\n    const urlAnalyze = 'https://dexscreener.com/conflux/0x87a340a3abb0c20ea047ff4c1a55b3356f850788';\n\n    return (\n      <View style={{ flex: 1 }}>\n        <Text style={textStyle1}>XYZ Price</Text>\n        <Text style={textStyle1b}>${swapSellPrice}</Text>\n        <Text> </Text>\n        <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }}>\n          <Button buttonStyle={buttonStyle} titleStyle={titleStyle} style={{ width: 150 }} type='outline' title='Trade' onPress={() => Lib.openUrl(urlTrade)} />\n          <View style={{ width: vp }} />\n          <Button buttonStyle={buttonStyle} titleStyle={titleStyle} style={{ width: 150 }} type='outline' title='Chart' onPress={() => Lib.openUrl(urlAnalyze)} />\n        </View>\n        <Text> </Text>\n        <Text> </Text>\n      </View>\n    );\n  }\n\n  renderUserPanel() {\n    if (!this.state.connected) return null;\n    const userData = this.state.userData;\n    const nftData = this.state.nftData;\n    const walletAddress = userData.userAddress;\n    let balanceToken = userData.userToken;\n    let balanceETH = userData.userETH;\n    let balanceUSDT = userData.userUSDT;\n\n    let memberStatus = 'NOT CULT MEMBER';\n    if (nftData.userOwnedNFTIds.length > 0) {\n      memberStatus = 'CULT MEMBER #' + this.state.selectedNFT;\n    }\n\n    const walletContent = balanceToken + ' ' + TOKEN + ' | ' + balanceETH + ' ' + ETH + ' | ' + balanceUSDT + ' ' + USDT;\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', paddingHorizontal: 2 * vp }}>\n        <Text> </Text>\n        <Text style={textStyle1}>{memberStatus}</Text>\n        <Text style={textStyle1}>{walletAddress}</Text>\n        <Text style={textStyle1}>{walletContent}</Text>\n        <Text> </Text>\n      </View>\n    );\n  }\n\n  renderDebug() {\n    if (!this.state.connected) return null;\n    const userData = this.state.userData;\n    const buyerData = this.state.buyerData;\n    const nftData = this.state.nftData;\n    const treasuryData = this.state.treasuryData;\n    return (\n      <View style={{ flex: 1, padding: vp }}>\n        <Text>{JSON.stringify(userData, null, 1)}</Text>\n        <Text>{JSON.stringify(buyerData, null, 1)}</Text>\n        <Text>{JSON.stringify(nftData, null, 1)}</Text>\n        <Text>{JSON.stringify(treasuryData, null, 1)}</Text>\n      </View>\n    );\n  }\n\n  renderPanel(title, desc, btnTitle, cb, disable, iconName) {\n    if (!iconName) iconName = 'question';\n    return (\n      <View style={{ flex: 1, borderWidth: 1, borderColor: 'gainsboro', padding: vp * 2, backgroundColor: 'white' }}>\n        <Text style={{ textAlign: 'center', fontWeight: 'bold' }}>{title.toUpperCase()}</Text>\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n          <Text> </Text>\n          <Icon name={iconName} size={64} color=\"black\" />\n          <Text> </Text>\n          <Text style={{ textAlign: 'center' }}>\n            {desc}\n          </Text>\n          <Text> </Text>\n        </View>\n        <Button disabled={disable} title={btnTitle} onPress={() => cb()} />\n      </View>\n    );\n  }\n\n  renderPanelSwap(swapType) {\n    const userData = this.state.userData;\n    const treasuryData = this.state.treasuryData;\n    const userTokenAllowance = treasuryData.userTokenAllowanceOK; // treasuryData.userTokenAllowance && treasuryData.userTokenAllowance !== '0';\n    const userUSDTAllowance = treasuryData.userUSDTAllowanceOK; // treasuryData.userUSDTAllowance && treasuryData.userUSDTAllowance !== '0';\n    const enableArbitrage = treasuryData.enableArbitrage;\n    let needApprove = true;\n    let resultSwap = this.state.resultSwap ? this.state.resultSwap : '0';\n    let token1;\n    let token2;\n    let approveFunc;\n    let swapFunc;\n    let ownedAmount;\n\n    if (swapType === 'buy') {\n      if (userUSDTAllowance) needApprove = false;\n      approveFunc = () => this.approveUSDT();\n      swapFunc = () => this.swapCoinToToken(this.state.amountInput, this.state.selectedNFT);\n      token1 = 'USDT';\n      token2 = 'XYZ';\n      ownedAmount = userData.userUSDT;\n    }\n    else if (swapType === 'sell') {\n      if (userTokenAllowance) needApprove = false;\n      approveFunc = () => this.approveToken();\n      swapFunc = () => this.swapTokenToCoin(this.state.amountInput, this.state.selectedNFT);\n      token1 = 'XYZ';\n      token2 = 'USDT';\n      ownedAmount = userData.userToken;\n    }\n\n    const s1 = { textAlign: 'center', fontWeight: 'bold', textTransform: 'uppercase' };\n\n    let enableSwap = false;\n    if (this.state.selectedNFT && this.state.selectedNFT > 0) {\n      if (!needApprove && Number(this.state.amountInput) > 0 && Number(ownedAmount) > 0) {\n        enableSwap = true;\n      }\n    }\n\n    let ps = { width: vps(96), borderWidth: 1, borderColor: 'gainsboro', backgroundColor: 'white', padding: vps(2) };\n    if (landscape) ps = { borderWidth: 1, borderColor: 'gainsboro', backgroundColor: 'white', padding: vps(2) };\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'white', padding: vps(2) }}>\n        <View style={ps}>\n          <Text> </Text>\n          <Text style={s1}>Swap {token1} to {token2}</Text>\n          <Text> </Text>\n          <Text> </Text>\n          <Text>Owned {ownedAmount} {token1}</Text>\n          <Text> </Text>\n          <View style={{ flexDirection: 'row' }}>\n            <View style={{ flex: 1 }}>\n              <TextInput\n                value={this.state.amountInput}\n                onChangeText={txt => this.setAmountInput(txt, swapType)}\n                keyboardType='numeric'\n                placeholder={'Enter ' + token1}\n                style={{ borderWidth: 1, padding: 5, flex: 1 }}\n              />\n            </View>\n            <View style={{ width: vp }} />\n            <View style={{ flexDirection: 'row' }}>\n              <View style={{ flex: 1 }}>\n                <Button style={{ flex: 1 }} type='outline' title='50%' onPress={\n                  () => this.setAmountByPctg(50, swapType)\n                } />\n              </View>\n              <View style={{ width: vp }} />\n              <View style={{ flex: 1 }}>\n                <Button style={{ flex: 1 }} type='outline' title='100%' onPress={\n                  () => this.setAmountByPctg(100, swapType)\n                } />\n              </View>\n            </View>\n          </View>\n          <Text> </Text>\n          <Text>Receive {resultSwap} {token2}</Text>\n          <Text> </Text>\n          <Button disabled={!needApprove} title={'Approve ' + token1} onPress={\n            () => approveFunc()} />\n          <View style={{ height: vp }} />\n          <Button disabled={!enableSwap} title={'Swap ' + token1} onPress={\n            () => swapFunc()} />\n          <View style={{ height: vp }} />\n          <Button disabled={false} type='outline' title='Back' onPress={\n            () => this.setState({ show: 'content' })} />\n        </View>\n      </View>\n    );\n  }\n\n  renderStake() {\n    const getLPUrl = 'https://app.swappi.io/#/add/v2/0xfe97E85d13ABD9c1c33384E796F10B73905637cE/0x2eB3a860Ddd8BC2B2621aA99168D414C14802c9f';\n    const treasuryData = this.state.treasuryData;\n    const nftData = this.state.nftData;\n\n    const s1 = { textAlign: 'center', fontWeight: 'bold', textTransform: 'uppercase', fontSize: 24 };\n    const s2 = { textAlign: 'center', textTransform: 'uppercase' };\n\n    const lpd = this.state.lpvaultData;\n    let msgInterest;\n    if (lpd.userDailyInterestInToken > 0) {\n      const txt2 = '($' + to4dec(lpd.userDailyInterestInUSDT) + ')';\n      msgInterest = '7D Avg. Daily Reward ' + to2dec(lpd.userDailyInterestInToken) + ' XYZ ' + txt2;\n    } else {\n      msgInterest = '7D Avg. Daily Reward ' + to2dec(lpd.dailyInterest) + ' XYZ/LP';\n    }\n\n    const apy = Math.floor(lpd.apy);\n    const apr = Math.floor(lpd.apr);\n    const ownedLP = lpd.balanceLPTokenUser;\n    const stakedLP = lpd.userStake;\n    const reward = lpd.userUnclaimedReward;\n\n    let msgReward = 'Reward ' + reward + ' XYZ';\n    let titleBtnUnstake = 'Unstake';\n    let unstakeTimeWarning;\n\n    if (Number(reward) > 0) {\n    }\n\n    else if (!lpd.mayUnstake && lpd.userAllowUnstakeTime > 0) {\n      // titleBtnUnstake = 'Enable ' + moment.unix(lpd.userAllowUnstakeTime).format('DD MMM HH:mm');\n      const txt = 'Unstake enable ' + moment.unix(lpd.userAllowUnstakeTime).format('DD MMM HH:mm');\n      unstakeTimeWarning = <Text>{txt}</Text>\n    }\n    let titleBtnClaim = 'Claim Reward';\n    if (lpd.userTurn > 0 && lpd.userTurn >= lpd.vaultTurn) {\n      msgReward = 'Next reward ' + moment.unix(nftData.nextUpdateTime).format('DD MMM HH:mm');\n      // titleBtnClaim = 'Enable ' + moment.unix(nftData.nextUpdateTime).format('DD MMM HH:mm');\n    }\n\n    let cultAccess = true; // (this.state.selectedNFT && this.state.selectedNFT > 0);\n\n    const inputOK = Number(this.state.amountInputLP) > 0;\n\n    const enableUnstake = lpd.mayUnstake && inputOK && cultAccess;\n    const enableStake = lpd.mayStake && inputOK && cultAccess;\n    const enableClaim = lpd.mayClaim && cultAccess && !(nftData.freezeTime);\n\n    let btnApprove = null;\n    if (lpd.approved) {\n    } else {\n      btnApprove = (\n        <View>\n          <Button disabled={!cultAccess} title='Approve XYZ-USDT LP' onPress={\n            () => this.lpvaultApprove()} />\n          <View style={{ height: vp }} />\n        </View>\n      );\n    }\n\n    let btnClaimReward = (\n      <Button disabled={!enableClaim} title={titleBtnClaim} onPress={\n        () => this.lpvaultClaim()} />\n    );\n\n    const withdrawAmount = lpd.userPendingWithdraw;\n    const withdrawTime = moment.unix(lpd.userAllowWithdrawTime).format('DD MMM HH:ss');\n    const mayWithdraw = lpd.mayWithdraw && cultAccess;\n    const userStakedInUSDT = lpd.userStakedInUSDT ? '($' + lpd.userStakedInUSDT + ')' : '';\n\n    if (Number(withdrawAmount) > 0) {\n      let enableWithdraw = false;\n      msgReward = 'Unstaking ' + withdrawAmount + ' XYZ-USDT LP.\\nWithdraw enable after ' + withdrawTime;\n      if (mayWithdraw) {\n        enableWithdraw = true;\n        msgReward = '' + withdrawAmount + ' XYZ-USDT LP unstaked.';\n      }\n      btnClaimReward = <Button disabled={!enableWithdraw} title={'Withdraw'} onPress={() => this.lpvaultWithdraw()} />\n    }\n\n    let ps = { width: vps(96), borderWidth: 1, borderColor: 'gainsboro', backgroundColor: 'white', padding: vps(2) };\n    if (landscape) ps = { borderWidth: 1, borderColor: 'gainsboro', backgroundColor: 'white', padding: vps(2) };\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'white', padding: vps(2) }}>\n        <View style={ps}>\n          <Text> </Text>\n          <Text style={s2}>Stake XYZ-USDT LP</Text>\n          <Text style={s1}>{apr}% APR</Text>\n          <Text style={s2}>{msgInterest}</Text>\n          <Text> </Text>\n          <Text> </Text>\n          <Text> </Text>\n          <Text>Owned {ownedLP} XYZ-USDT LP</Text>\n          <Text> </Text>\n          <View style={{ flexDirection: 'row' }}>\n            <View style={{ flex: 1 }}>\n              <TextInput\n                value={this.state.amountInputLP}\n                onChangeText={txt => this.setState({ amountInputLP: txt })}\n                keyboardType='numeric'\n                placeholder={'Amount stake/unstake'}\n                style={{ borderWidth: 1, padding: 5, flex: 1 }}\n              />\n            </View>\n            <View style={{ width: vp }} />\n            <View style={{ flexDirection: 'row' }}>\n              <Button style={{ flex: 1 }} type='outline' title='Get LP' onPress={\n                () => Lib.openUrl(getLPUrl)\n              } />\n            </View>\n          </View>\n          <Text> </Text>\n          <Text>Staked {to2dec(stakedLP)} XYZ-USDT LP {userStakedInUSDT}</Text>\n          {unstakeTimeWarning}\n          <Text> </Text>\n          {btnApprove}\n          <View style={{ flexDirection: 'row' }}>\n            <Button style={{}} type='outline' title='100%' onPress={\n              () => this.setState({ amountInputLP: ownedLP })\n            } />\n            <View style={{ width: vp }} />\n            <View style={{ flex: 1 }}>\n              <Button disabled={!enableStake} title='Stake' onPress={\n                () => this.lpvaultStake(this.state.amountInputLP)} />\n            </View>\n          </View>\n          <View style={{ height: vp }} />\n          <View style={{ flexDirection: 'row' }}>\n            <Button style={{}} type='outline' title='100%' onPress={\n              () => this.setState({ amountInputLP: stakedLP })\n            } />\n            <View style={{ width: vp }} />\n            <View style={{ flex: 1 }}>\n              <Button disabled={!enableUnstake} title={titleBtnUnstake} onPress={\n                () => this.lpvaultUnstake(this.state.amountInputLP)} />\n            </View>\n          </View>\n          <Text> </Text>\n          <Text>{msgReward}</Text>\n          <Text> </Text>\n          {btnClaimReward}\n          <View style={{ height: vp }} />\n          <Button disabled={false} type='outline' title='Back' onPress={\n            () => this.setState({ show: 'content' })} />\n        </View>\n      </View>\n    );\n  }\n\n  renderBonding() {\n    const swapType = 'buy';\n    const userData = this.state.userData;\n    const treasuryData = this.state.treasuryData;\n    const userTokenAllowance = treasuryData.userTokenAllowance && treasuryData.userTokenAllowance !== '0';\n    const userUSDTAllowance = treasuryData.userUSDTAllowance && treasuryData.userUSDTAllowance !== '0';\n    const enableArbitrage = treasuryData.enableArbitrage;\n    let needApprove = true;\n    let resultSwap = this.state.resultSwap ? Number(this.state.resultSwap) : 0;\n    let resultSwapFromDex = this.state.resultSwapFromDex ? Number(this.state.resultSwapFromDex) : 0;\n    let bonusAmount = 0;\n    let bonusPctg = 0;\n    let receiveAmount = resultSwap;\n    let totalAmount = resultSwap;\n\n    if (resultSwap > resultSwapFromDex) {\n      receiveAmount = resultSwapFromDex;\n      totalAmount = resultSwap;\n      bonusAmount = (resultSwap - resultSwapFromDex);\n      bonusPctg = Math.floor((bonusAmount * 100) / resultSwapFromDex);\n    }\n\n    let token1;\n    let token2;\n    let approveFunc;\n    let swapFunc;\n    let ownedAmount;\n\n    if (userUSDTAllowance) needApprove = false;\n    approveFunc = () => this.approveUSDT();\n    swapFunc = () => this.swapCoinToToken(this.state.amountInput, this.state.selectedNFT);\n    token1 = 'USDT';\n    token2 = 'XYZ';\n    ownedAmount = userData.userUSDT;\n\n    const s1 = { textAlign: 'center', fontWeight: 'bold', textTransform: 'uppercase', fontSize: 24 };\n\n    let enableSwap = false;\n    // if (this.state.selectedNFT && this.state.selectedNFT > 0) {\n    //   if (!needApprove && Number(this.state.amountInput) > 0 && Number(ownedAmount) > 0) {\n    //     enableSwap = true;\n    //   }\n    // }\n    if (!needApprove && Number(this.state.amountInput) > 0 && Number(ownedAmount) > 0) {\n      enableSwap = true;\n    }\n\n    let ps = { width: vps(96), borderWidth: 1, borderColor: 'gainsboro', backgroundColor: 'white', padding: vps(2) };\n    if (landscape) ps = { borderWidth: 1, borderColor: 'gainsboro', backgroundColor: 'white', padding: vps(2) };\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'white', padding: vps(2) }}>\n        <View style={ps}>\n          <Text> </Text>\n          <Text style={s1}>Bonding</Text>\n          <Text style={{ textAlign: 'center' }}>Swap USDT for more XYZ than Swappi</Text>\n          <Text style={{ textAlign: 'center' }}>Enter more USDT for more bonus!</Text>\n          <Text> </Text>\n          <Text> </Text>\n          <Text>Owned {ownedAmount} USDT</Text>\n          <Text> </Text>\n          <View style={{ flexDirection: 'row' }}>\n            <View style={{ flex: 1 }}>\n              <TextInput\n                value={this.state.amountInput}\n                onChangeText={txt => this.setAmountInput(txt, swapType)}\n                keyboardType='numeric'\n                placeholder={'Enter ' + token1}\n                style={{ borderWidth: 1, padding: 5, flex: 1 }}\n              />\n            </View>\n            <View style={{ width: vp }} />\n            <View style={{ flexDirection: 'row' }}>\n              <View style={{ flex: 1 }}>\n                <Button style={{ flex: 1 }} type='outline' title='50%' onPress={\n                  () => this.setAmountByPctg(50, swapType)\n                } />\n              </View>\n              <View style={{ width: vp }} />\n              <View style={{ flex: 1 }}>\n                <Button style={{ flex: 1 }} type='outline' title='100%' onPress={\n                  () => this.setAmountByPctg(100, swapType)\n                } />\n              </View>\n            </View>\n          </View>\n          <Text> </Text>\n          <Text>Receive {receiveAmount} XYZ</Text>\n          <Text>Bonus {bonusAmount} XYZ (+{bonusPctg}%)</Text>\n          <Text>Total {totalAmount} XYZ</Text>\n          <Text> </Text>\n          <Button disabled={!needApprove} title={'Approve ' + token1} onPress={\n            () => approveFunc()} />\n          <View style={{ height: vp }} />\n          <Button disabled={!enableSwap} title={'Swap ' + token1} onPress={\n            () => swapFunc()} />\n          <View style={{ height: vp }} />\n          <Button disabled={false} type='outline' title='Back' onPress={\n            () => this.setState({ show: 'content' })} />\n        </View>\n      </View>\n    );\n  }\n\n  renderContent() {\n    // return <DAO selectedNFT={this.state.selectedNFT} userData={this.state.userData} lpvaultData={this.state.lpvaultData} treasuryData={this.state.treasuryData} nftData={this.state.nftData} />;\n    if (this.state.show === 'disclaimer') {\n      return (\n        <ScrollView style={{ flex: 1, backgroundColor: 'black' }}>\n          <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n            <View style={{ maxWidth: vps(100) }}>\n              {this.renderDisclaimer()}\n            </View>\n          </View>\n        </ScrollView>\n      );\n    }\n\n    const busyView = (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'black' }}>\n        <ActivityIndicator color='white' size='large' />\n      </View>\n    );\n\n    let show = this.state.show;\n    // show = 'content'; // hack\n\n    const contentIndex = this.state.contentIndex;\n    const selectedNFT = this.state.selectedNFT;\n    const userData = this.state.userData;\n    const treasuryData = this.state.treasuryData;\n    const lpvaultData = this.state.lpvaultData;\n    const nftData = this.state.nftData;\n\n    if (show === 'connecting') return busyView;\n    else if (show === 'disconnect') return this.renderDisconnect();\n\n    let middleContent = (\n      <View />\n    );\n\n    if (show === 'content') {\n      const panelsData = {\n        ts: userData.blocktime,\n        userETH: userData.userETH,\n        selectedNFT,\n        apr: lpvaultData.apr,\n        bonus: treasuryData.bonus,\n        bonusSampleAmount: treasuryData.bonusSample,\n        sellPrice: treasuryData.sellPrice,\n        rewardPerNFT: to4dec(nftData.rewardPerNFT),\n        nextUpdateTime: nftData.nextUpdateTime,\n        nftDataList: nftData.dataList,\n        nftSession: nftData.session,\n        nftPendingWithdraw: nftData.pendingWithdraw,\n        nftPendingWithdrawDeadline: nftData.pendingWithdrawDeadline,\n        nftMayWithdraw: nftData.mayWithdraw,\n      };\n\n      middleContent = (\n        <View style={{}}>\n          <Panels\n            panelsData={panelsData}\n            onClickStake={() => this.setState({ show: 'stake', amountInputLP: '' })}\n            onClickSwap={() => this.setState({ show: 'swapBuy', amountInput: '' })}\n            onClickSell={() => this.setState({ show: 'swapSell', amountInput: '' })}\n            onClickClaim={() => this.nftClaim(selectedNFT)}\n            onClickJoin={() => this.setState({ modalMintVisible: true })}\n            onClickLeave={() => this.burnNFT(selectedNFT)}\n            onClickWithdraw={() => this.nftWithdraw(nftData.pendingWithdrawIndex)}\n            userData={this.state.userData} lpvaultData={this.state.lpvaultData} treasuryData={this.state.treasuryData} nftData={this.state.nftData} />\n        </View>\n      );\n    }\n\n    if (show === 'swapBuy') {\n      middleContent = (\n        <View style={{}}>\n          {this.renderBonding()}\n        </View>\n      );\n    }\n\n    if (show === 'swapSell') {\n      middleContent = (\n        <View style={{}}>\n          {this.renderPanelSwap('sell')}\n        </View>\n      );\n    }\n\n    if (show === 'stake') {\n      middleContent = (\n        <View style={{}}>\n          {this.renderStake()}\n        </View>\n      );\n    }\n\n    if (contentIndex === 1) {\n      middleContent = (\n        <View style={{}}>\n          <Analytic lpvaultData={this.state.lpvaultData} treasuryData={this.state.treasuryData} nftData={this.state.nftData} />\n        </View>\n      );\n    } else if (contentIndex === 2) {\n      middleContent = (\n        <View style={{}}>\n          <DAO selectedNFT={this.state.selectedNFT} userData={this.state.userData} lpvaultData={this.state.lpvaultData} treasuryData={this.state.treasuryData} nftData={this.state.nftData} />\n        </View>\n      );\n    }\n\n    let adminPanel;\n    if (userData && (userData.isAdmin)) {\n      adminPanel = (<View>\n        <Text> </Text>\n        {this.renderAdmin()}\n        <Text> </Text>\n      </View>);\n    }\n\n    const imgUrl = '/logo192.png';\n    const imgSz = 20 * vp;\n\n    const col2 = '#eeeeee';\n    const menuCols = [col2, col2, col2];\n    const textCols = ['black', 'black', 'black'];\n    const cI = this.state.contentIndex ? this.state.contentIndex : 0;\n    menuCols[cI] = 'black';\n    textCols[cI] = 'white';\n\n    return (\n      <ScrollView style={{ flex: 1 }}>\n        <View style={{ alignItems: 'center', backgroundColor: 'black' }}>\n          <View style={{ maxWidth: vps(100), padding: vps(2), alignItems: 'center' }}>\n            <Text> </Text>\n            <Image\n              style={{ width: imgSz, height: imgSz }}\n              source={{ uri: imgUrl }}\n            />\n            <Text> </Text>\n            {this.renderPricePanel()}\n            <Text> </Text>\n          </View>\n        </View>\n        <View style={{ alignItems: 'center', backgroundColor: 'gainsboro', paddingVertical: landscape ? vps(2) : 0 }}>\n          <View style={{\n            width: vps(100), flexDirection: 'row', borderColor: 'gainsboro',\n            paddingHorizontal: 0, borderBottomWidth: 0, borderTopWidth: 1\n          }}>\n            <TouchableOpacity onPress={() => this.setState({ contentIndex: 0 })}\n              style={{ flex: 1, backgroundColor: menuCols[0], padding: vps(2), alignItems: 'center', justifyContent: 'center' }}>\n              <Icon name='home' size={32} color={textCols[0]} />\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => this.setState({ contentIndex: 1 })}\n              style={{ flex: 1, backgroundColor: menuCols[1], padding: vps(2), alignItems: 'center', justifyContent: 'center' }}>\n              <Icon name='search-plus' size={32} color={textCols[1]} />\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => this.setState({ contentIndex: 2 })}\n              style={{ flex: 1, backgroundColor: menuCols[2], padding: vps(2), alignItems: 'center', justifyContent: 'center' }}>\n              <Icon name='user' size={32} color={textCols[2]} />\n            </TouchableOpacity>\n          </View>\n          <View style={{ width: vps(100), paddingHorizontal: 0 }}>\n            {middleContent}\n          </View>\n        </View>\n        <View style={{ alignItems: 'center', backgroundColor: 'black' }}>\n          <View style={{ maxWidth: vps(100), padding: vps(2) }}>\n            {this.renderUserPanel()}\n            {adminPanel}\n          </View>\n        </View>\n      </ScrollView >\n    );\n  }\n\n  renderFooter() {\n    if (this.state.connected) {\n      return (\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n          <Text style={{ textAlign: 'center' }}>CONNECTED TO CONFLUX ESPACE</Text>\n        </View>\n      );\n    }\n\n    if (this.state.connecting) {\n      return (\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n          <Text style={{ textAlign: 'center' }}>CONNECTING TO CONFLUX ESPACE</Text>\n        </View>\n      );\n    }\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text style={{ textAlign: 'center' }}>DISCONNECTED TO CONFLUX ESPACE</Text>\n      </View>\n    );\n  }\n\n  renderHeader() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text style={{ textAlign: 'center' }}>DRAGONCULT v0.22 - ALPHA TESTING PHASE</Text>\n      </View>\n    );\n  }\n\n  render() {\n    const contentLayout = this.state.contentLayout;\n    if (!contentLayout) {\n      return (\n        <View style={{ flex: 1 }}>\n          <View style={{}}>\n            <Text> </Text>\n            <Text> </Text>\n            <Text> </Text>\n          </View>\n          <View style={{ flex: 1 }} onLayout={e => {\n            const contentLayout = e.nativeEvent.layout;\n            this.setState({ contentLayout });\n          }}>\n            <ActivityIndicator color='gray' size='large' />\n          </View>\n          <View style={{}}>\n            <Text> </Text>\n            <Text> </Text>\n            <Text> </Text>\n          </View>\n        </View>\n      );\n    }\n\n    return (\n      <View style={{ flex: 1 }}>\n        {this.renderModalTx()}\n        {this.renderModalMint()}\n        <View style={{ flex: 1, borderBottomColor: 'gainsboro', borderBottomWidth: 1 }}>\n          {this.renderHeader()}\n        </View>\n        <View style={{ width: contentLayout.width, height: contentLayout.height }} >\n          {this.renderContent()}\n        </View>\n        <View style={{ flex: 1, borderTopColor: 'gainsboro', borderTopWidth: 1 }}>\n          {this.renderFooter()}\n        </View>\n      </View>\n    );\n\n  }\n\n}\n\nexport default Home;\n","import React from 'react';\nimport { View, Dimensions } from 'react-native';\nimport { ThemeProvider, Button } from 'react-native-elements';\nimport Landing from './game/Home';\n// import Home from './game/Home';\nimport {\n  MemoryRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport log from 'loglevel';\n\nlog.setLevel('debug');\n\nconst theme = {\n  colors: {\n    primary: 'dimgray'\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: 'busy',\n      landscape: false,\n      w: Dimensions.get('window').width\n    };\n  }\n\n  componentDidMount() {\n  }\n\n  componentWillMount() {\n  }\n\n  render() {\n    let ww = Dimensions.get('window').width;\n    let wh = Dimensions.get('window').height;\n    let w = ww - 20;\n    let h = wh;\n\n    return (\n      <>\n        <style type=\"text/css\">{`\n          @font-face {\n            font-family: 'FontAwesome';\n            src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n          }\n        `}</style>\n\n        <View style={{ minWidth: w, height: h }}>\n          <ThemeProvider theme={theme}>\n\n            <Router>\n              <Switch>\n                {/* <Route path=\"/app\" component={Home} /> */}\n                <Route path=\"/\" component={Landing} />\n              </Switch>\n            </Router>\n          </ThemeProvider>\n        </View>\n      </>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}